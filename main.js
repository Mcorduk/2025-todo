(()=>{"use strict";var __webpack_modules__={56:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI1LXRvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n')},72:module=>{eval('\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI1LXRvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72\n')},77:(I,g,C)=>{I.exports=C.p+"603e0de475bb1c20a3dc.jpg"},113:module=>{eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNS10b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanM/MWRkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///113\n")},169:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `#addTaskDialog,\r\n#addTodoDialog {\r\n    background: none;\r\n    border: 0;\r\n}\r\n\r\n#addTodoDialog {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n#addTaskDialog > div,\r\n#addTodoDialog > div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 360px;\r\n    max-width: 60%;\r\n    max-height: 500px;\r\n    background-color: #46539e;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n    padding: 20px;\r\n    padding-top: 0px;\r\n}\r\n\r\n.dialog-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 15px;\r\n\r\n    button {\r\n        background: none;\r\n        border: none;\r\n    }\r\n\r\n    span {\r\n        color: white;\r\n        font-size: 36px;\r\n    }\r\n\r\n    h2 {\r\n        margin: 0;\r\n        color: white;\r\n        font-size: 1.2rem;\r\n        text-align: center;\r\n        margin-left: -36px;\r\n    }\r\n}\r\n\r\n.dialog-body {\r\n    padding: 0 15px 15px 15px;\r\n\r\n    .task-icon {\r\n        display: flex;\r\n        justify-content: center;\r\n        position: relative;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .task-icon:hover .blue-icon {\r\n        opacity: 0.5;\r\n    }\r\n\r\n    .task-icon .blue-icon {\r\n        border-radius: 50%;\r\n        width: 60px;\r\n        height: 60px;\r\n        background: white;\r\n        font-size: 48px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-content: center;\r\n        align-items: center;\r\n        transition: opacity 0.3s ease;\r\n    }\r\n\r\n    .task-icon .change-icon {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        display: none;\r\n        border-radius: 50%;\r\n        width: 60px;\r\n        height: 60px;\r\n        background: white;\r\n        font-size: 48px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        cursor: pointer;\r\n        transition: opacity 0.3s ease;\r\n    }\r\n\r\n    .task-icon:hover .change-icon {\r\n        display: flex;\r\n    }\r\n}\r\n\r\n.form-group {\r\n    margin-bottom: 15px;\r\n\r\n    label {\r\n        display: block;\r\n        margin-bottom: 5px;\r\n        color: white;\r\n    }\r\n\r\n    & input,\r\n    & textarea {\r\n        width: 100%;\r\n        padding: 8px;\r\n        border: 1px solid #ccc;\r\n        border-radius: 4px;\r\n        font-size: 0.8rem;\r\n    }\r\n}\r\n\r\n.date-container,\r\n.status-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    gap: 10px;\r\n\r\n    .form-group {\r\n        flex: 1;\r\n    }\r\n}\r\n\r\n.dialog-footer {\r\n    padding: 0px;\r\n    text-align: right;\r\n}\r\n\r\n.cancel-btn,\r\n.save-btn {\r\n    color: white;\r\n    padding: 8px 16px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 1em;\r\n}\r\n\r\n.cancel-btn {\r\n    background-color: darkgray;\r\n    margin-right: 10px;\r\n}\r\n\r\n.save-btn {\r\n    background-color: #1e90ff;\r\n}\r\n\r\n.cancel-btn:hover {\r\n    background-color: #bbb;\r\n}\r\n\r\n.save-btn:hover {\r\n    background-color: #0077cc;\r\n}\r\n`, "",{"version":3,"sources":["webpack://./src/css/add-task-dialog.css"],"names":[],"mappings":"AAAA;;IAEI,gBAAgB;IAChB,SAAS;AACb;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;;IAEI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;IAChB,cAAc;IACd,iBAAiB;IACjB,yBAAyB;IACzB,wCAAwC;IACxC,aAAa;IACb,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,aAAa;;IAEb;QACI,gBAAgB;QAChB,YAAY;IAChB;;IAEA;QACI,YAAY;QACZ,eAAe;IACnB;;IAEA;QACI,SAAS;QACT,YAAY;QACZ,iBAAiB;QACjB,kBAAkB;QAClB,kBAAkB;IACtB;AACJ;;AAEA;IACI,yBAAyB;;IAEzB;QACI,aAAa;QACb,uBAAuB;QACvB,kBAAkB;QAClB,eAAe;IACnB;;IAEA;QACI,YAAY;IAChB;;IAEA;QACI,kBAAkB;QAClB,WAAW;QACX,YAAY;QACZ,iBAAiB;QACjB,eAAe;QACf,aAAa;QACb,uBAAuB;QACvB,qBAAqB;QACrB,mBAAmB;QACnB,6BAA6B;IACjC;;IAEA;QACI,kBAAkB;QAClB,MAAM;QACN,OAAO;QACP,aAAa;QACb,kBAAkB;QAClB,WAAW;QACX,YAAY;QACZ,iBAAiB;QACjB,eAAe;QACf,aAAa;QACb,uBAAuB;QACvB,mBAAmB;QACnB,eAAe;QACf,6BAA6B;IACjC;;IAEA;QACI,aAAa;IACjB;AACJ;;AAEA;IACI,mBAAmB;;IAEnB;QACI,cAAc;QACd,kBAAkB;QAClB,YAAY;IAChB;;IAEA;;QAEI,WAAW;QACX,YAAY;QACZ,sBAAsB;QACtB,kBAAkB;QAClB,iBAAiB;IACrB;AACJ;;AAEA;;IAEI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;IACnB,SAAS;;IAET;QACI,OAAO;IACX;AACJ;;AAEA;IACI,YAAY;IACZ,iBAAiB;AACrB;;AAEA;;IAEI,YAAY;IACZ,iBAAiB;IACjB,YAAY;IACZ,kBAAkB;IAClB,eAAe;IACf,cAAc;AAClB;;AAEA;IACI,0BAA0B;IAC1B,kBAAkB;AACtB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B","sourcesContent":["#addTaskDialog,\\r\\n#addTodoDialog {\\r\\n    background: none;\\r\\n    border: 0;\\r\\n}\\r\\n\\r\\n#addTodoDialog {\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n}\\r\\n\\r\\n#addTaskDialog > div,\\r\\n#addTodoDialog > div {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    min-width: 360px;\\r\\n    max-width: 60%;\\r\\n    max-height: 500px;\\r\\n    background-color: #46539e;\\r\\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\\r\\n    padding: 20px;\\r\\n    padding-top: 0px;\\r\\n}\\r\\n\\r\\n.dialog-header {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    align-items: center;\\r\\n    padding: 15px;\\r\\n\\r\\n    button {\\r\\n        background: none;\\r\\n        border: none;\\r\\n    }\\r\\n\\r\\n    span {\\r\\n        color: white;\\r\\n        font-size: 36px;\\r\\n    }\\r\\n\\r\\n    h2 {\\r\\n        margin: 0;\\r\\n        color: white;\\r\\n        font-size: 1.2rem;\\r\\n        text-align: center;\\r\\n        margin-left: -36px;\\r\\n    }\\r\\n}\\r\\n\\r\\n.dialog-body {\\r\\n    padding: 0 15px 15px 15px;\\r\\n\\r\\n    .task-icon {\\r\\n        display: flex;\\r\\n        justify-content: center;\\r\\n        position: relative;\\r\\n        cursor: pointer;\\r\\n    }\\r\\n\\r\\n    .task-icon:hover .blue-icon {\\r\\n        opacity: 0.5;\\r\\n    }\\r\\n\\r\\n    .task-icon .blue-icon {\\r\\n        border-radius: 50%;\\r\\n        width: 60px;\\r\\n        height: 60px;\\r\\n        background: white;\\r\\n        font-size: 48px;\\r\\n        display: flex;\\r\\n        justify-content: center;\\r\\n        align-content: center;\\r\\n        align-items: center;\\r\\n        transition: opacity 0.3s ease;\\r\\n    }\\r\\n\\r\\n    .task-icon .change-icon {\\r\\n        position: absolute;\\r\\n        top: 0;\\r\\n        left: 0;\\r\\n        display: none;\\r\\n        border-radius: 50%;\\r\\n        width: 60px;\\r\\n        height: 60px;\\r\\n        background: white;\\r\\n        font-size: 48px;\\r\\n        display: flex;\\r\\n        justify-content: center;\\r\\n        align-items: center;\\r\\n        cursor: pointer;\\r\\n        transition: opacity 0.3s ease;\\r\\n    }\\r\\n\\r\\n    .task-icon:hover .change-icon {\\r\\n        display: flex;\\r\\n    }\\r\\n}\\r\\n\\r\\n.form-group {\\r\\n    margin-bottom: 15px;\\r\\n\\r\\n    label {\\r\\n        display: block;\\r\\n        margin-bottom: 5px;\\r\\n        color: white;\\r\\n    }\\r\\n\\r\\n    & input,\\r\\n    & textarea {\\r\\n        width: 100%;\\r\\n        padding: 8px;\\r\\n        border: 1px solid #ccc;\\r\\n        border-radius: 4px;\\r\\n        font-size: 0.8rem;\\r\\n    }\\r\\n}\\r\\n\\r\\n.date-container,\\r\\n.status-container {\\r\\n    display: flex;\\r\\n    flex-direction: row;\\r\\n    justify-content: space-between;\\r\\n    align-items: center;\\r\\n    gap: 10px;\\r\\n\\r\\n    .form-group {\\r\\n        flex: 1;\\r\\n    }\\r\\n}\\r\\n\\r\\n.dialog-footer {\\r\\n    padding: 0px;\\r\\n    text-align: right;\\r\\n}\\r\\n\\r\\n.cancel-btn,\\r\\n.save-btn {\\r\\n    color: white;\\r\\n    padding: 8px 16px;\\r\\n    border: none;\\r\\n    border-radius: 4px;\\r\\n    cursor: pointer;\\r\\n    font-size: 1em;\\r\\n}\\r\\n\\r\\n.cancel-btn {\\r\\n    background-color: darkgray;\\r\\n    margin-right: 10px;\\r\\n}\\r\\n\\r\\n.save-btn {\\r\\n    background-color: #1e90ff;\\r\\n}\\r\\n\\r\\n.cancel-btn:hover {\\r\\n    background-color: #bbb;\\r\\n}\\r\\n\\r\\n.save-btn:hover {\\r\\n    background-color: #0077cc;\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUM2RztBQUNqQjtBQUM1Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sK0ZBQStGLFlBQVksV0FBVyxNQUFNLEtBQUssVUFBVSxVQUFVLE9BQU8sTUFBTSxVQUFVLFlBQVksYUFBYSxXQUFXLFlBQVksYUFBYSxhQUFhLFdBQVcsWUFBWSxPQUFPLEtBQUssVUFBVSxZQUFZLGFBQWEsWUFBWSxLQUFLLFlBQVksV0FBVyxPQUFPLEtBQUssVUFBVSxVQUFVLE9BQU8sS0FBSyxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsTUFBTSxNQUFNLEtBQUssYUFBYSxNQUFNLFVBQVUsWUFBWSxhQUFhLFdBQVcsT0FBTyxLQUFLLFVBQVUsT0FBTyxLQUFLLFlBQVksV0FBVyxVQUFVLFlBQVksV0FBVyxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsT0FBTyxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsWUFBWSxXQUFXLFVBQVUsWUFBWSxXQUFXLFVBQVUsWUFBWSxhQUFhLFdBQVcsWUFBWSxPQUFPLEtBQUssVUFBVSxNQUFNLE1BQU0sS0FBSyxhQUFhLE1BQU0sVUFBVSxZQUFZLFdBQVcsT0FBTyxNQUFNLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxNQUFNLE1BQU0sTUFBTSxVQUFVLFlBQVksYUFBYSxhQUFhLFlBQVksS0FBSyxVQUFVLEtBQUssTUFBTSxLQUFLLFVBQVUsWUFBWSxPQUFPLE1BQU0sVUFBVSxZQUFZLFdBQVcsWUFBWSxXQUFXLFVBQVUsT0FBTyxLQUFLLFlBQVksYUFBYSxPQUFPLEtBQUssWUFBWSxPQUFPLEtBQUssWUFBWSxPQUFPLEtBQUssWUFBWSw2REFBNkQseUJBQXlCLGtCQUFrQixLQUFLLHdCQUF3QixvQkFBb0IscUJBQXFCLEtBQUssdURBQXVELHNCQUFzQiwrQkFBK0IseUJBQXlCLHVCQUF1QiwwQkFBMEIsa0NBQWtDLGlEQUFpRCxzQkFBc0IseUJBQXlCLEtBQUssd0JBQXdCLHNCQUFzQix1Q0FBdUMsNEJBQTRCLHNCQUFzQixvQkFBb0IsNkJBQTZCLHlCQUF5QixTQUFTLGtCQUFrQix5QkFBeUIsNEJBQTRCLFNBQVMsZ0JBQWdCLHNCQUFzQix5QkFBeUIsOEJBQThCLCtCQUErQiwrQkFBK0IsU0FBUyxLQUFLLHNCQUFzQixrQ0FBa0Msd0JBQXdCLDBCQUEwQixvQ0FBb0MsK0JBQStCLDRCQUE0QixTQUFTLHlDQUF5Qyx5QkFBeUIsU0FBUyxtQ0FBbUMsK0JBQStCLHdCQUF3Qix5QkFBeUIsOEJBQThCLDRCQUE0QiwwQkFBMEIsb0NBQW9DLGtDQUFrQyxnQ0FBZ0MsMENBQTBDLFNBQVMscUNBQXFDLCtCQUErQixtQkFBbUIsb0JBQW9CLDBCQUEwQiwrQkFBK0Isd0JBQXdCLHlCQUF5Qiw4QkFBOEIsNEJBQTRCLDBCQUEwQixvQ0FBb0MsZ0NBQWdDLDRCQUE0QiwwQ0FBMEMsU0FBUywyQ0FBMkMsMEJBQTBCLFNBQVMsS0FBSyxxQkFBcUIsNEJBQTRCLG1CQUFtQiwyQkFBMkIsK0JBQStCLHlCQUF5QixTQUFTLHdDQUF3Qyx3QkFBd0IseUJBQXlCLG1DQUFtQywrQkFBK0IsOEJBQThCLFNBQVMsS0FBSywrQ0FBK0Msc0JBQXNCLDRCQUE0Qix1Q0FBdUMsNEJBQTRCLGtCQUFrQix5QkFBeUIsb0JBQW9CLFNBQVMsS0FBSyx3QkFBd0IscUJBQXFCLDBCQUEwQixLQUFLLG1DQUFtQyxxQkFBcUIsMEJBQTBCLHFCQUFxQiwyQkFBMkIsd0JBQXdCLHVCQUF1QixLQUFLLHFCQUFxQixtQ0FBbUMsMkJBQTJCLEtBQUssbUJBQW1CLGtDQUFrQyxLQUFLLDJCQUEyQiwrQkFBK0IsS0FBSyx5QkFBeUIsa0NBQWtDLEtBQUssdUJBQXVCO0FBQ3JoSjtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNS10b2RvLy4vc3JjL2Nzcy9hZGQtdGFzay1kaWFsb2cuY3NzPzVmMTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCNhZGRUYXNrRGlhbG9nLFxyXG4jYWRkVG9kb0RpYWxvZyB7XHJcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xyXG4gICAgYm9yZGVyOiAwO1xyXG59XHJcblxyXG4jYWRkVG9kb0RpYWxvZyB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJTtcclxufVxyXG5cclxuI2FkZFRhc2tEaWFsb2cgPiBkaXYsXHJcbiNhZGRUb2RvRGlhbG9nID4gZGl2IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgbWluLXdpZHRoOiAzNjBweDtcclxuICAgIG1heC13aWR0aDogNjAlO1xyXG4gICAgbWF4LWhlaWdodDogNTAwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDY1MzllO1xyXG4gICAgYm94LXNoYWRvdzogMCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcbiAgICBwYWRkaW5nLXRvcDogMHB4O1xyXG59XHJcblxyXG4uZGlhbG9nLWhlYWRlciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDE1cHg7XHJcblxyXG4gICAgYnV0dG9uIHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xyXG4gICAgICAgIGJvcmRlcjogbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICBzcGFuIHtcclxuICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgICAgZm9udC1zaXplOiAzNnB4O1xyXG4gICAgfVxyXG5cclxuICAgIGgyIHtcclxuICAgICAgICBtYXJnaW46IDA7XHJcbiAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICBtYXJnaW4tbGVmdDogLTM2cHg7XHJcbiAgICB9XHJcbn1cclxuXHJcbi5kaWFsb2ctYm9keSB7XHJcbiAgICBwYWRkaW5nOiAwIDE1cHggMTVweCAxNXB4O1xyXG5cclxuICAgIC50YXNrLWljb24ge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIH1cclxuXHJcbiAgICAudGFzay1pY29uOmhvdmVyIC5ibHVlLWljb24ge1xyXG4gICAgICAgIG9wYWNpdHk6IDAuNTtcclxuICAgIH1cclxuXHJcbiAgICAudGFzay1pY29uIC5ibHVlLWljb24ge1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgICAgICB3aWR0aDogNjBweDtcclxuICAgICAgICBoZWlnaHQ6IDYwcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICAgICAgZm9udC1zaXplOiA0OHB4O1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgYWxpZ24tY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzIGVhc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLnRhc2staWNvbiAuY2hhbmdlLWljb24ge1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB0b3A6IDA7XHJcbiAgICAgICAgbGVmdDogMDtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgICAgICB3aWR0aDogNjBweDtcclxuICAgICAgICBoZWlnaHQ6IDYwcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICAgICAgZm9udC1zaXplOiA0OHB4O1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzIGVhc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLnRhc2staWNvbjpob3ZlciAuY2hhbmdlLWljb24ge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICB9XHJcbn1cclxuXHJcbi5mb3JtLWdyb3VwIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XHJcblxyXG4gICAgbGFiZWwge1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxuICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICB9XHJcblxyXG4gICAgJiBpbnB1dCxcclxuICAgICYgdGV4dGFyZWEge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIHBhZGRpbmc6IDhweDtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgICAgICBmb250LXNpemU6IDAuOHJlbTtcclxuICAgIH1cclxufVxyXG5cclxuLmRhdGUtY29udGFpbmVyLFxyXG4uc3RhdHVzLWNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBnYXA6IDEwcHg7XHJcblxyXG4gICAgLmZvcm0tZ3JvdXAge1xyXG4gICAgICAgIGZsZXg6IDE7XHJcbiAgICB9XHJcbn1cclxuXHJcbi5kaWFsb2ctZm9vdGVyIHtcclxuICAgIHBhZGRpbmc6IDBweDtcclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG59XHJcblxyXG4uY2FuY2VsLWJ0bixcclxuLnNhdmUtYnRuIHtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIHBhZGRpbmc6IDhweCAxNnB4O1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgZm9udC1zaXplOiAxZW07XHJcbn1cclxuXHJcbi5jYW5jZWwtYnRuIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtncmF5O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG59XHJcblxyXG4uc2F2ZS1idG4ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlOTBmZjtcclxufVxyXG5cclxuLmNhbmNlbC1idG46aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2JiYjtcclxufVxyXG5cclxuLnNhdmUtYnRuOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc3Y2M7XHJcbn1cclxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2FkZC10YXNrLWRpYWxvZy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7O0lBRUksZ0JBQWdCO0lBQ2hCLFNBQVM7QUFDYjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCOztBQUVBOztJQUVJLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxpQkFBaUI7SUFDakIseUJBQXlCO0lBQ3pCLHdDQUF3QztJQUN4QyxhQUFhO0lBQ2IsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLDhCQUE4QjtJQUM5QixtQkFBbUI7SUFDbkIsYUFBYTs7SUFFYjtRQUNJLGdCQUFnQjtRQUNoQixZQUFZO0lBQ2hCOztJQUVBO1FBQ0ksWUFBWTtRQUNaLGVBQWU7SUFDbkI7O0lBRUE7UUFDSSxTQUFTO1FBQ1QsWUFBWTtRQUNaLGlCQUFpQjtRQUNqQixrQkFBa0I7UUFDbEIsa0JBQWtCO0lBQ3RCO0FBQ0o7O0FBRUE7SUFDSSx5QkFBeUI7O0lBRXpCO1FBQ0ksYUFBYTtRQUNiLHVCQUF1QjtRQUN2QixrQkFBa0I7UUFDbEIsZUFBZTtJQUNuQjs7SUFFQTtRQUNJLFlBQVk7SUFDaEI7O0lBRUE7UUFDSSxrQkFBa0I7UUFDbEIsV0FBVztRQUNYLFlBQVk7UUFDWixpQkFBaUI7UUFDakIsZUFBZTtRQUNmLGFBQWE7UUFDYix1QkFBdUI7UUFDdkIscUJBQXFCO1FBQ3JCLG1CQUFtQjtRQUNuQiw2QkFBNkI7SUFDakM7O0lBRUE7UUFDSSxrQkFBa0I7UUFDbEIsTUFBTTtRQUNOLE9BQU87UUFDUCxhQUFhO1FBQ2Isa0JBQWtCO1FBQ2xCLFdBQVc7UUFDWCxZQUFZO1FBQ1osaUJBQWlCO1FBQ2pCLGVBQWU7UUFDZixhQUFhO1FBQ2IsdUJBQXVCO1FBQ3ZCLG1CQUFtQjtRQUNuQixlQUFlO1FBQ2YsNkJBQTZCO0lBQ2pDOztJQUVBO1FBQ0ksYUFBYTtJQUNqQjtBQUNKOztBQUVBO0lBQ0ksbUJBQW1COztJQUVuQjtRQUNJLGNBQWM7UUFDZCxrQkFBa0I7UUFDbEIsWUFBWTtJQUNoQjs7SUFFQTs7UUFFSSxXQUFXO1FBQ1gsWUFBWTtRQUNaLHNCQUFzQjtRQUN0QixrQkFBa0I7UUFDbEIsaUJBQWlCO0lBQ3JCO0FBQ0o7O0FBRUE7O0lBRUksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQiw4QkFBOEI7SUFDOUIsbUJBQW1CO0lBQ25CLFNBQVM7O0lBRVQ7UUFDSSxPQUFPO0lBQ1g7QUFDSjs7QUFFQTtJQUNJLFlBQVk7SUFDWixpQkFBaUI7QUFDckI7O0FBRUE7O0lBRUksWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksMEJBQTBCO0lBQzFCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIjYWRkVGFza0RpYWxvZyxcXHJcXG4jYWRkVG9kb0RpYWxvZyB7XFxyXFxuICAgIGJhY2tncm91bmQ6IG5vbmU7XFxyXFxuICAgIGJvcmRlcjogMDtcXHJcXG59XFxyXFxuXFxyXFxuI2FkZFRvZG9EaWFsb2cge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4jYWRkVGFza0RpYWxvZyA+IGRpdixcXHJcXG4jYWRkVG9kb0RpYWxvZyA+IGRpdiB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIG1pbi13aWR0aDogMzYwcHg7XFxyXFxuICAgIG1heC13aWR0aDogNjAlO1xcclxcbiAgICBtYXgtaGVpZ2h0OiA1MDBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzQ2NTM5ZTtcXHJcXG4gICAgYm94LXNoYWRvdzogMCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcXHJcXG4gICAgcGFkZGluZzogMjBweDtcXHJcXG4gICAgcGFkZGluZy10b3A6IDBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmRpYWxvZy1oZWFkZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIHBhZGRpbmc6IDE1cHg7XFxyXFxuXFxyXFxuICAgIGJ1dHRvbiB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xcclxcbiAgICAgICAgYm9yZGVyOiBub25lO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIHNwYW4ge1xcclxcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAzNnB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGgyIHtcXHJcXG4gICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xcclxcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC0zNnB4O1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5kaWFsb2ctYm9keSB7XFxyXFxuICAgIHBhZGRpbmc6IDAgMTVweCAxNXB4IDE1cHg7XFxyXFxuXFxyXFxuICAgIC50YXNrLWljb24ge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC50YXNrLWljb246aG92ZXIgLmJsdWUtaWNvbiB7XFxyXFxuICAgICAgICBvcGFjaXR5OiAwLjU7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnRhc2staWNvbiAuYmx1ZS1pY29uIHtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG4gICAgICAgIHdpZHRoOiA2MHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiA2MHB4O1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XFxyXFxuICAgICAgICBmb250LXNpemU6IDQ4cHg7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgICAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzIGVhc2U7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnRhc2staWNvbiAuY2hhbmdlLWljb24ge1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgdG9wOiAwO1xcclxcbiAgICAgICAgbGVmdDogMDtcXHJcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICAgICAgICB3aWR0aDogNjBweDtcXHJcXG4gICAgICAgIGhlaWdodDogNjBweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xcclxcbiAgICAgICAgZm9udC1zaXplOiA0OHB4O1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyBlYXNlO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC50YXNrLWljb246aG92ZXIgLmNoYW5nZS1pY29uIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0tZ3JvdXAge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xcclxcblxcclxcbiAgICBsYWJlbCB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcXHJcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmIGlucHV0LFxcclxcbiAgICAmIHRleHRhcmVhIHtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgcGFkZGluZzogOHB4O1xcclxcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMC44cmVtO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5kYXRlLWNvbnRhaW5lcixcXHJcXG4uc3RhdHVzLWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgZ2FwOiAxMHB4O1xcclxcblxcclxcbiAgICAuZm9ybS1ncm91cCB7XFxyXFxuICAgICAgICBmbGV4OiAxO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5kaWFsb2ctZm9vdGVyIHtcXHJcXG4gICAgcGFkZGluZzogMHB4O1xcclxcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXHJcXG59XFxyXFxuXFxyXFxuLmNhbmNlbC1idG4sXFxyXFxuLnNhdmUtYnRuIHtcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICBwYWRkaW5nOiA4cHggMTZweDtcXHJcXG4gICAgYm9yZGVyOiBub25lO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgZm9udC1zaXplOiAxZW07XFxyXFxufVxcclxcblxcclxcbi5jYW5jZWwtYnRuIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2dyYXk7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnNhdmUtYnRuIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlOTBmZjtcXHJcXG59XFxyXFxuXFxyXFxuLmNhbmNlbC1idG46aG92ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmJiO1xcclxcbn1cXHJcXG5cXHJcXG4uc2F2ZS1idG46aG92ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3N2NjO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///169\n')},314:module=>{eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI1LXRvZG8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///314\n')},324:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.push([module.id, "@import url(https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap);"]);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\r\n    background-color: #d4e3ee;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100vh;\r\n}\r\n\r\n#app {\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: relative;\r\n    min-width: 400px;\r\n    max-width: 60%;\r\n    min-height: 600px;\r\n    background-color: white;\r\n    border-radius: 5px;\r\n    box-shadow:\r\n        rgba(255, 255, 255, 0.1) 0px 1px 1px 0px inset,\r\n        rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\r\n        rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\r\n    overflow: hidden;\r\n}\r\n\r\n.montserrat {\r\n    font-family: "Montserrat", serif;\r\n    font-optical-sizing: auto;\r\n    font-weight: 300;\r\n    font-style: normal;\r\n}\r\n\r\n.open-sans {\r\n    font-family: "Open Sans", serif;\r\n    font-optical-sizing: auto;\r\n    font-weight: 400;\r\n    font-style: normal;\r\n    font-variation-settings: "wdth" 100;\r\n}\r\n\r\n.gray {\r\n    color: lightgray;\r\n}\r\n\r\n.dark-gray {\r\n    color: darkgray;\r\n}\r\n\r\n.dark-slate {\r\n    color: darkslategray;\r\n}\r\n\r\n.flex {\r\n    display: flex;\r\n}\r\n.flex-1 {\r\n    flex: 1;\r\n}\r\n\r\nhr {\r\n    border: 0;\r\n    height: 1px;\r\n    background-image: linear-gradient(\r\n        to right,\r\n        rgba(131, 131, 131, 0),\r\n        rgba(131, 131, 131, 0.75),\r\n        rgba(131, 131, 131, 0)\r\n    );\r\n}\r\n\r\n.material-symbols-sharp {\r\n    font-variation-settings:\r\n        "FILL" 0,\r\n        "wght" 300,\r\n        "GRAD" 0,\r\n        "opsz" 48;\r\n}\r\n\r\n.blue-icon {\r\n    color: blue;\r\n}\r\n\r\n.light-blue-icon {\r\n    color: #2db7e5;\r\n}\r\n\r\n.orange-icon {\r\n    color: orange;\r\n}\r\n\r\n.red-icon {\r\n    color: orangered;\r\n}\r\n\r\n.dialog {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    padding: 20px;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.default-text {\r\n    text-align: center;\r\n    margin: auto;\r\n}\r\n`, "",{"version":3,"sources":["webpack://./src/css/common-style.css"],"names":[],"mappings":"AAEA;IACI,yBAAyB;IACzB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,gBAAgB;IAChB,cAAc;IACd,iBAAiB;IACjB,uBAAuB;IACvB,kBAAkB;IAClB;;;8CAG0C;IAC1C,gBAAgB;AACpB;;AAEA;IACI,gCAAgC;IAChC,yBAAyB;IACzB,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,+BAA+B;IAC/B,yBAAyB;IACzB,gBAAgB;IAChB,kBAAkB;IAClB,mCAAmC;AACvC;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,aAAa;AACjB;AACA;IACI,OAAO;AACX;;AAEA;IACI,SAAS;IACT,WAAW;IACX;;;;;KAKC;AACL;;AAEA;IACI;;;;iBAIa;AACjB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,aAAa;IACb,kBAAkB;IAClB,yCAAyC;AAC7C;;AAEA;IACI,kBAAkB;IAClB,YAAY;AAChB","sourcesContent":["@import url(\\"https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap\\");\\r\\n\\r\\nbody {\\r\\n    background-color: #d4e3ee;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n    height: 100vh;\\r\\n}\\r\\n\\r\\n#app {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    position: relative;\\r\\n    min-width: 400px;\\r\\n    max-width: 60%;\\r\\n    min-height: 600px;\\r\\n    background-color: white;\\r\\n    border-radius: 5px;\\r\\n    box-shadow:\\r\\n        rgba(255, 255, 255, 0.1) 0px 1px 1px 0px inset,\\r\\n        rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\\r\\n        rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\\r\\n    overflow: hidden;\\r\\n}\\r\\n\\r\\n.montserrat {\\r\\n    font-family: \\"Montserrat\\", serif;\\r\\n    font-optical-sizing: auto;\\r\\n    font-weight: 300;\\r\\n    font-style: normal;\\r\\n}\\r\\n\\r\\n.open-sans {\\r\\n    font-family: \\"Open Sans\\", serif;\\r\\n    font-optical-sizing: auto;\\r\\n    font-weight: 400;\\r\\n    font-style: normal;\\r\\n    font-variation-settings: \\"wdth\\" 100;\\r\\n}\\r\\n\\r\\n.gray {\\r\\n    color: lightgray;\\r\\n}\\r\\n\\r\\n.dark-gray {\\r\\n    color: darkgray;\\r\\n}\\r\\n\\r\\n.dark-slate {\\r\\n    color: darkslategray;\\r\\n}\\r\\n\\r\\n.flex {\\r\\n    display: flex;\\r\\n}\\r\\n.flex-1 {\\r\\n    flex: 1;\\r\\n}\\r\\n\\r\\nhr {\\r\\n    border: 0;\\r\\n    height: 1px;\\r\\n    background-image: linear-gradient(\\r\\n        to right,\\r\\n        rgba(131, 131, 131, 0),\\r\\n        rgba(131, 131, 131, 0.75),\\r\\n        rgba(131, 131, 131, 0)\\r\\n    );\\r\\n}\\r\\n\\r\\n.material-symbols-sharp {\\r\\n    font-variation-settings:\\r\\n        \\"FILL\\" 0,\\r\\n        \\"wght\\" 300,\\r\\n        \\"GRAD\\" 0,\\r\\n        \\"opsz\\" 48;\\r\\n}\\r\\n\\r\\n.blue-icon {\\r\\n    color: blue;\\r\\n}\\r\\n\\r\\n.light-blue-icon {\\r\\n    color: #2db7e5;\\r\\n}\\r\\n\\r\\n.orange-icon {\\r\\n    color: orange;\\r\\n}\\r\\n\\r\\n.red-icon {\\r\\n    color: orangered;\\r\\n}\\r\\n\\r\\n.dialog {\\r\\n    position: absolute;\\r\\n    top: 50%;\\r\\n    left: 50%;\\r\\n    transform: translate(-50%, -50%);\\r\\n    padding: 20px;\\r\\n    border-radius: 8px;\\r\\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\\r\\n}\\r\\n\\r\\n.default-text {\\r\\n    text-align: center;\\r\\n    margin: auto;\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///324\n')},331:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `#app > section.flex-1 {\r\n    position: relative;\r\n    overflow: hidden;\r\n\r\n    #taskList {\r\n        padding: 20px;\r\n        padding-bottom: 100px;\r\n        max-height: 400px;\r\n        overflow: auto;\r\n    }\r\n\r\n    .task {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        margin-bottom: 10px;\r\n        width: 100%;\r\n\r\n        #taskIcon {\r\n            display: inline-flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            width: 50px; /* Adjust size as needed */\r\n            height: 50px; /* Adjust size as needed */\r\n            border: lightgray 1px solid;\r\n            border-radius: 50%; /* Makes it a circle */\r\n            margin-right: 20px;\r\n        }\r\n\r\n        #taskText {\r\n            text-align: left;\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n\r\n            #taskHeader {\r\n                font-weight: 500;\r\n            }\r\n\r\n            #taskDescription {\r\n                font-size: 0.8rem;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n#completedTasksContainer {\r\n    nav {\r\n        p {\r\n            font-size: 0.8rem;\r\n            font-weight: 600;\r\n            margin: 0;\r\n\r\n            span {\r\n                display: inline-block;\r\n                background-color: gray;\r\n                border-radius: 50%;\r\n                width: 20px;\r\n                height: 20px;\r\n                color: white;\r\n                text-align: center;\r\n            }\r\n        }\r\n\r\n        #completedTaskCount {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            text-align: center;\r\n        }\r\n    }\r\n\r\n    #completedTaskList {\r\n        max-height: 400px;\r\n        overflow: auto;\r\n    }\r\n}\r\n\r\n#showAddTaskDialog {\r\n    width: 50px;\r\n    height: 50px;\r\n    position: absolute;\r\n    z-index: 2;\r\n    bottom: 35px;\r\n    right: 20px;\r\n    border-radius: 50%;\r\n    border: 0;\r\n    padding: 0;\r\n    margin: 0;\r\n    background-color: #2db7e5;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    span {\r\n        font-size: 36px;\r\n    }\r\n}\r\n#completedTasksContainer {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 1;\r\n    top: 80%;\r\n    background-color: white;\r\n    padding: 20px;\r\n    transition: all 0.3s ease-out;\r\n\r\n    /* glassmorphism effect */\r\n    background: rgba(255, 255, 255, 0);\r\n    border-radius: 16px;\r\n    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\r\n    backdrop-filter: blur(7.5px);\r\n    -webkit-backdrop-filter: blur(7.5px);\r\n    border: 1px solid rgba(255, 255, 255, 0.67);\r\n\r\n    nav {\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        margin-bottom: 20px;\r\n\r\n        button#showCompletedTasks {\r\n            background: gray;\r\n            border-radius: 25%;\r\n            border: none;\r\n            color: white;\r\n            margin-right: 75px;\r\n\r\n            span {\r\n                font-size: 24px;\r\n            }\r\n        }\r\n    }\r\n\r\n    section {\r\n        width: 100%;\r\n\r\n        .task-complete {\r\n            opacity: 0.9;\r\n            #taskHeader,\r\n            #taskDescription,\r\n            #taskTime {\r\n                text-decoration: line-through;\r\n            }\r\n            span {\r\n                opacity: 0.6;\r\n                text-decoration: none;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.slide-up {\r\n    top: 0% !important;\r\n    padding-top: 20px;\r\n}\r\n\r\n.hidden {\r\n    opacity: 0;\r\n    visibility: hidden;\r\n}\r\n\r\n/* Get rotated idiot lol */\r\n.rotated {\r\n    transform: rotate(180deg);\r\n    transition: transform 0.3s ease;\r\n}\r\n\r\n.priority {\r\n    min-width: 42px;\r\n}\r\n`, "",{"version":3,"sources":["webpack://./src/css/body-style.css"],"names":[],"mappings":"AAAA;IACI,kBAAkB;IAClB,gBAAgB;;IAEhB;QACI,aAAa;QACb,qBAAqB;QACrB,iBAAiB;QACjB,cAAc;IAClB;;IAEA;QACI,aAAa;QACb,mBAAmB;QACnB,8BAA8B;QAC9B,mBAAmB;QACnB,WAAW;;QAEX;YACI,oBAAoB;YACpB,mBAAmB;YACnB,uBAAuB;YACvB,WAAW,EAAE,0BAA0B;YACvC,YAAY,EAAE,0BAA0B;YACxC,2BAA2B;YAC3B,kBAAkB,EAAE,sBAAsB;YAC1C,kBAAkB;QACtB;;QAEA;YACI,gBAAgB;YAChB,aAAa;YACb,sBAAsB;YACtB,uBAAuB;;YAEvB;gBACI,gBAAgB;YACpB;;YAEA;gBACI,iBAAiB;YACrB;QACJ;IACJ;AACJ;;AAEA;IACI;QACI;YACI,iBAAiB;YACjB,gBAAgB;YAChB,SAAS;;YAET;gBACI,qBAAqB;gBACrB,sBAAsB;gBACtB,kBAAkB;gBAClB,WAAW;gBACX,YAAY;gBACZ,YAAY;gBACZ,kBAAkB;YACtB;QACJ;;QAEA;YACI,aAAa;YACb,uBAAuB;YACvB,mBAAmB;YACnB,kBAAkB;QACtB;IACJ;;IAEA;QACI,iBAAiB;QACjB,cAAc;IAClB;AACJ;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,UAAU;IACV,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,SAAS;IACT,yBAAyB;IACzB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;;IAEnB;QACI,eAAe;IACnB;AACJ;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,UAAU;IACV,QAAQ;IACR,uBAAuB;IACvB,aAAa;IACb,6BAA6B;;IAE7B,yBAAyB;IACzB,kCAAkC;IAClC,mBAAmB;IACnB,yCAAyC;IACzC,4BAA4B;IAC5B,oCAAoC;IACpC,2CAA2C;;IAE3C;QACI,WAAW;QACX,aAAa;QACb,mBAAmB;QACnB,8BAA8B;QAC9B,mBAAmB;QACnB,mBAAmB;;QAEnB;YACI,gBAAgB;YAChB,kBAAkB;YAClB,YAAY;YACZ,YAAY;YACZ,kBAAkB;;YAElB;gBACI,eAAe;YACnB;QACJ;IACJ;;IAEA;QACI,WAAW;;QAEX;YACI,YAAY;YACZ;;;gBAGI,6BAA6B;YACjC;YACA;gBACI,YAAY;gBACZ,qBAAqB;YACzB;QACJ;IACJ;AACJ;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,UAAU;IACV,kBAAkB;AACtB;;AAEA,0BAA0B;AAC1B;IACI,yBAAyB;IACzB,+BAA+B;AACnC;;AAEA;IACI,eAAe;AACnB","sourcesContent":["#app > section.flex-1 {\\r\\n    position: relative;\\r\\n    overflow: hidden;\\r\\n\\r\\n    #taskList {\\r\\n        padding: 20px;\\r\\n        padding-bottom: 100px;\\r\\n        max-height: 400px;\\r\\n        overflow: auto;\\r\\n    }\\r\\n\\r\\n    .task {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n        justify-content: space-between;\\r\\n        margin-bottom: 10px;\\r\\n        width: 100%;\\r\\n\\r\\n        #taskIcon {\\r\\n            display: inline-flex;\\r\\n            align-items: center;\\r\\n            justify-content: center;\\r\\n            width: 50px; /* Adjust size as needed */\\r\\n            height: 50px; /* Adjust size as needed */\\r\\n            border: lightgray 1px solid;\\r\\n            border-radius: 50%; /* Makes it a circle */\\r\\n            margin-right: 20px;\\r\\n        }\\r\\n\\r\\n        #taskText {\\r\\n            text-align: left;\\r\\n            display: flex;\\r\\n            flex-direction: column;\\r\\n            justify-content: center;\\r\\n\\r\\n            #taskHeader {\\r\\n                font-weight: 500;\\r\\n            }\\r\\n\\r\\n            #taskDescription {\\r\\n                font-size: 0.8rem;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n#completedTasksContainer {\\r\\n    nav {\\r\\n        p {\\r\\n            font-size: 0.8rem;\\r\\n            font-weight: 600;\\r\\n            margin: 0;\\r\\n\\r\\n            span {\\r\\n                display: inline-block;\\r\\n                background-color: gray;\\r\\n                border-radius: 50%;\\r\\n                width: 20px;\\r\\n                height: 20px;\\r\\n                color: white;\\r\\n                text-align: center;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        #completedTaskCount {\\r\\n            display: flex;\\r\\n            justify-content: center;\\r\\n            align-items: center;\\r\\n            text-align: center;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    #completedTaskList {\\r\\n        max-height: 400px;\\r\\n        overflow: auto;\\r\\n    }\\r\\n}\\r\\n\\r\\n#showAddTaskDialog {\\r\\n    width: 50px;\\r\\n    height: 50px;\\r\\n    position: absolute;\\r\\n    z-index: 2;\\r\\n    bottom: 35px;\\r\\n    right: 20px;\\r\\n    border-radius: 50%;\\r\\n    border: 0;\\r\\n    padding: 0;\\r\\n    margin: 0;\\r\\n    background-color: #2db7e5;\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n\\r\\n    span {\\r\\n        font-size: 36px;\\r\\n    }\\r\\n}\\r\\n#completedTasksContainer {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: center;\\r\\n    position: absolute;\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    z-index: 1;\\r\\n    top: 80%;\\r\\n    background-color: white;\\r\\n    padding: 20px;\\r\\n    transition: all 0.3s ease-out;\\r\\n\\r\\n    /* glassmorphism effect */\\r\\n    background: rgba(255, 255, 255, 0);\\r\\n    border-radius: 16px;\\r\\n    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\\r\\n    backdrop-filter: blur(7.5px);\\r\\n    -webkit-backdrop-filter: blur(7.5px);\\r\\n    border: 1px solid rgba(255, 255, 255, 0.67);\\r\\n\\r\\n    nav {\\r\\n        width: 100%;\\r\\n        display: flex;\\r\\n        flex-direction: row;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        margin-bottom: 20px;\\r\\n\\r\\n        button#showCompletedTasks {\\r\\n            background: gray;\\r\\n            border-radius: 25%;\\r\\n            border: none;\\r\\n            color: white;\\r\\n            margin-right: 75px;\\r\\n\\r\\n            span {\\r\\n                font-size: 24px;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    section {\\r\\n        width: 100%;\\r\\n\\r\\n        .task-complete {\\r\\n            opacity: 0.9;\\r\\n            #taskHeader,\\r\\n            #taskDescription,\\r\\n            #taskTime {\\r\\n                text-decoration: line-through;\\r\\n            }\\r\\n            span {\\r\\n                opacity: 0.6;\\r\\n                text-decoration: none;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n.slide-up {\\r\\n    top: 0% !important;\\r\\n    padding-top: 20px;\\r\\n}\\r\\n\\r\\n.hidden {\\r\\n    opacity: 0;\\r\\n    visibility: hidden;\\r\\n}\\r\\n\\r\\n/* Get rotated idiot lol */\\r\\n.rotated {\\r\\n    transform: rotate(180deg);\\r\\n    transition: transform 0.3s ease;\\r\\n}\\r\\n\\r\\n.priority {\\r\\n    min-width: 42px;\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///331\n')},354:module=>{eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNS10b2RvLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanM/YWYxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///354\n')},358:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `button {\r\n    color: white;\r\n}\r\n\r\n#sidenav {\r\n    position: absolute;\r\n}\r\n\r\n.hamb {\r\n    top: 25px;\r\n    left: 25px;\r\n    position: relative;\r\n    margin-right: -0.625rem;\r\n    border-width: 0px;\r\n    background-color: transparent;\r\n    padding: 0;\r\n    z-index: 99;\r\n}\r\n.sr-only {\r\n    position: absolute;\r\n    width: 1px;\r\n    height: 1px;\r\n    padding: 0;\r\n    margin: -1px;\r\n    overflow: hidden;\r\n    clip: rect(0, 0, 0, 0);\r\n    white-space: nowrap;\r\n    border-width: 0;\r\n}\r\n.hamb .ham {\r\n    -webkit-tap-highlight-color: transparent;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    user-select: none;\r\n}\r\n.hamb .ham {\r\n    height: 60px;\r\n    width: 60px;\r\n    cursor: pointer;\r\n    transition-duration: 0.3s;\r\n    margin-left: -20px;\r\n    margin-top: -20px;\r\n}\r\n.hamb .ham .top {\r\n    stroke-dasharray: 40 160;\r\n}\r\n.hamb .ham .middle {\r\n    transform-origin: 50%;\r\n    stroke-dasharray: 40 142;\r\n}\r\n.hamb .ham .bottom {\r\n    transform-origin: 50%;\r\n    stroke-dasharray: 40 85;\r\n}\r\n.hamb .line {\r\n    fill: none;\r\n    stroke: white;\r\n    stroke-width: 5;\r\n    transition-duration: 0.3s;\r\n    stroke-linecap: round;\r\n}\r\n.hamb.active svg {\r\n    --tw-rotate: 45deg;\r\n    transform: rotate(var(--tw-rotate));\r\n}\r\n.hamb.active svg .top {\r\n    stroke-dashoffset: -64px;\r\n}\r\n.hamb.active svg .middle {\r\n    --tw-rotate: 90deg;\r\n    transform: rotate(var(--tw-rotate));\r\n}\r\n.hamb.active svg .bottom {\r\n    stroke-dashoffset: -64px;\r\n}\r\n`, "",{"version":3,"sources":["webpack://./src/css/hamburger.css"],"names":[],"mappings":"AAAA;IACI,YAAY;AAChB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,kBAAkB;IAClB,uBAAuB;IACvB,iBAAiB;IACjB,6BAA6B;IAC7B,UAAU;IACV,WAAW;AACf;AACA;IACI,kBAAkB;IAClB,UAAU;IACV,WAAW;IACX,UAAU;IACV,YAAY;IACZ,gBAAgB;IAChB,sBAAsB;IACtB,mBAAmB;IACnB,eAAe;AACnB;AACA;IACI,wCAAwC;IACxC,yBAAyB;IACzB,sBAAsB;IACtB,iBAAiB;AACrB;AACA;IACI,YAAY;IACZ,WAAW;IACX,eAAe;IACf,yBAAyB;IACzB,kBAAkB;IAClB,iBAAiB;AACrB;AACA;IACI,wBAAwB;AAC5B;AACA;IACI,qBAAqB;IACrB,wBAAwB;AAC5B;AACA;IACI,qBAAqB;IACrB,uBAAuB;AAC3B;AACA;IACI,UAAU;IACV,aAAa;IACb,eAAe;IACf,yBAAyB;IACzB,qBAAqB;AACzB;AACA;IACI,kBAAkB;IAClB,mCAAmC;AACvC;AACA;IACI,wBAAwB;AAC5B;AACA;IACI,kBAAkB;IAClB,mCAAmC;AACvC;AACA;IACI,wBAAwB;AAC5B","sourcesContent":["button {\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n#sidenav {\\r\\n    position: absolute;\\r\\n}\\r\\n\\r\\n.hamb {\\r\\n    top: 25px;\\r\\n    left: 25px;\\r\\n    position: relative;\\r\\n    margin-right: -0.625rem;\\r\\n    border-width: 0px;\\r\\n    background-color: transparent;\\r\\n    padding: 0;\\r\\n    z-index: 99;\\r\\n}\\r\\n.sr-only {\\r\\n    position: absolute;\\r\\n    width: 1px;\\r\\n    height: 1px;\\r\\n    padding: 0;\\r\\n    margin: -1px;\\r\\n    overflow: hidden;\\r\\n    clip: rect(0, 0, 0, 0);\\r\\n    white-space: nowrap;\\r\\n    border-width: 0;\\r\\n}\\r\\n.hamb .ham {\\r\\n    -webkit-tap-highlight-color: transparent;\\r\\n    -webkit-user-select: none;\\r\\n    -moz-user-select: none;\\r\\n    user-select: none;\\r\\n}\\r\\n.hamb .ham {\\r\\n    height: 60px;\\r\\n    width: 60px;\\r\\n    cursor: pointer;\\r\\n    transition-duration: 0.3s;\\r\\n    margin-left: -20px;\\r\\n    margin-top: -20px;\\r\\n}\\r\\n.hamb .ham .top {\\r\\n    stroke-dasharray: 40 160;\\r\\n}\\r\\n.hamb .ham .middle {\\r\\n    transform-origin: 50%;\\r\\n    stroke-dasharray: 40 142;\\r\\n}\\r\\n.hamb .ham .bottom {\\r\\n    transform-origin: 50%;\\r\\n    stroke-dasharray: 40 85;\\r\\n}\\r\\n.hamb .line {\\r\\n    fill: none;\\r\\n    stroke: white;\\r\\n    stroke-width: 5;\\r\\n    transition-duration: 0.3s;\\r\\n    stroke-linecap: round;\\r\\n}\\r\\n.hamb.active svg {\\r\\n    --tw-rotate: 45deg;\\r\\n    transform: rotate(var(--tw-rotate));\\r\\n}\\r\\n.hamb.active svg .top {\\r\\n    stroke-dashoffset: -64px;\\r\\n}\\r\\n.hamb.active svg .middle {\\r\\n    --tw-rotate: 90deg;\\r\\n    transform: rotate(var(--tw-rotate));\\r\\n}\\r\\n.hamb.active svg .bottom {\\r\\n    stroke-dashoffset: -64px;\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///358\n')},417:module=>{eval('\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^[\'"].*[\'"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/["\'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return "\\"".concat(url.replace(/"/g, \'\\\\"\').replace(/\\n/g, "\\\\n"), "\\"");\n  }\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI1LXRvZG8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzPzFkZTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///417\n')},540:module=>{eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI1LXRvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///540\n')},600:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(417);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(77), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `#app > nav {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    min-height: 200px;\r\n    background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});\r\n    background-size: cover;\r\n}\r\n\r\n#leftHeader {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n    max-width: 60%;\r\n    padding: 20px;\r\n}\r\n\r\n#todoHeader {\r\n    color: white;\r\n    font-size: 1.6rem;\r\n\r\n    & h1 {\r\n        margin: 0 0 20px 0;\r\n    }\r\n}\r\n\r\n#currentDate {\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    color: lightgray;\r\n    font-size: 0.85rem;\r\n}\r\n\r\n#rightHeader {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 40%;\r\n    padding: 20px;\r\n\r\n    /* css glass effect */\r\n    background: rgba(73, 56, 137, 0.26);\r\n    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\r\n    backdrop-filter: blur(1px);\r\n    -webkit-backdrop-filter: blur(1px);\r\n\r\n    #todoTaskStatuses {\r\n        display: flex;\r\n\r\n        #completedTasks,\r\n        #incompleteTasks {\r\n            text-align: right;\r\n        }\r\n\r\n        #completedTasks .number,\r\n        #incompleteTasks .number {\r\n            font-size: 1.6rem;\r\n            color: white;\r\n            font-weight: 500;\r\n        }\r\n\r\n        #completedTasks {\r\n            padding-right: 20px;\r\n        }\r\n    }\r\n\r\n    #completionPercentage p {\r\n        text-align: center;\r\n    }\r\n}\r\n`, "",{"version":3,"sources":["webpack://./src/css/nav-style.css"],"names":[],"mappings":"AAAA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,WAAW;IACX,iBAAiB;IACjB,yDAAmD;IACnD,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,yBAAyB;IACzB,cAAc;IACd,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,iBAAiB;;IAEjB;QACI,kBAAkB;IACtB;AACJ;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,UAAU;IACV,aAAa;;IAEb,qBAAqB;IACrB,mCAAmC;IACnC,yCAAyC;IACzC,0BAA0B;IAC1B,kCAAkC;;IAElC;QACI,aAAa;;QAEb;;YAEI,iBAAiB;QACrB;;QAEA;;YAEI,iBAAiB;YACjB,YAAY;YACZ,gBAAgB;QACpB;;QAEA;YACI,mBAAmB;QACvB;IACJ;;IAEA;QACI,kBAAkB;IACtB;AACJ","sourcesContent":["#app > nav {\\r\\n    display: flex;\\r\\n    flex-direction: row;\\r\\n    justify-content: space-between;\\r\\n    width: 100%;\\r\\n    min-height: 200px;\\r\\n    background-image: url(\\"../image/blue-mountain.jpg\\");\\r\\n    background-size: cover;\\r\\n}\\r\\n\\r\\n#leftHeader {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: flex-end;\\r\\n    max-width: 60%;\\r\\n    padding: 20px;\\r\\n}\\r\\n\\r\\n#todoHeader {\\r\\n    color: white;\\r\\n    font-size: 1.6rem;\\r\\n\\r\\n    & h1 {\\r\\n        margin: 0 0 20px 0;\\r\\n    }\\r\\n}\\r\\n\\r\\n#currentDate {\\r\\n    margin-top: 10px;\\r\\n    margin-bottom: 10px;\\r\\n    color: lightgray;\\r\\n    font-size: 0.85rem;\\r\\n}\\r\\n\\r\\n#rightHeader {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    width: 40%;\\r\\n    padding: 20px;\\r\\n\\r\\n    /* css glass effect */\\r\\n    background: rgba(73, 56, 137, 0.26);\\r\\n    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\\r\\n    backdrop-filter: blur(1px);\\r\\n    -webkit-backdrop-filter: blur(1px);\\r\\n\\r\\n    #todoTaskStatuses {\\r\\n        display: flex;\\r\\n\\r\\n        #completedTasks,\\r\\n        #incompleteTasks {\\r\\n            text-align: right;\\r\\n        }\\r\\n\\r\\n        #completedTasks .number,\\r\\n        #incompleteTasks .number {\\r\\n            font-size: 1.6rem;\\r\\n            color: white;\\r\\n            font-weight: 500;\\r\\n        }\\r\\n\\r\\n        #completedTasks {\\r\\n            padding-right: 20px;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    #completionPercentage p {\\r\\n        text-align: center;\\r\\n    }\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQzZHO0FBQ2pCO0FBQ087QUFDbkcsNENBQTRDLGlFQUE2QztBQUN6Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GLHlDQUF5QyxzRkFBK0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUNBQW1DO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sd0ZBQXdGLFVBQVUsWUFBWSxhQUFhLFdBQVcsWUFBWSxhQUFhLGFBQWEsT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLFdBQVcsVUFBVSxPQUFPLEtBQUssVUFBVSxhQUFhLE1BQU0sWUFBWSxNQUFNLE1BQU0sS0FBSyxZQUFZLGFBQWEsYUFBYSxhQUFhLE9BQU8sS0FBSyxVQUFVLFlBQVksV0FBVyxXQUFXLFlBQVksYUFBYSxhQUFhLGFBQWEsY0FBYyxNQUFNLFdBQVcsTUFBTSxZQUFZLE9BQU8sTUFBTSxZQUFZLFdBQVcsWUFBWSxPQUFPLEtBQUssWUFBWSxNQUFNLE1BQU0sS0FBSyxZQUFZLE1BQU0scUNBQXFDLHNCQUFzQiw0QkFBNEIsdUNBQXVDLG9CQUFvQiwwQkFBMEIsOERBQThELCtCQUErQixLQUFLLHFCQUFxQixzQkFBc0IsK0JBQStCLGtDQUFrQyx1QkFBdUIsc0JBQXNCLEtBQUsscUJBQXFCLHFCQUFxQiwwQkFBMEIsa0JBQWtCLCtCQUErQixTQUFTLEtBQUssc0JBQXNCLHlCQUF5Qiw0QkFBNEIseUJBQXlCLDJCQUEyQixLQUFLLHNCQUFzQixzQkFBc0IsK0JBQStCLG1CQUFtQixzQkFBc0IsOEVBQThFLGtEQUFrRCxtQ0FBbUMsMkNBQTJDLCtCQUErQiwwQkFBMEIsOERBQThELGtDQUFrQyxhQUFhLDhFQUE4RSxrQ0FBa0MsNkJBQTZCLGlDQUFpQyxhQUFhLGlDQUFpQyxvQ0FBb0MsYUFBYSxTQUFTLHFDQUFxQywrQkFBK0IsU0FBUyxLQUFLLHVCQUF1QjtBQUNqcEU7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjUtdG9kby8uL3NyYy9jc3MvbmF2LXN0eWxlLmNzcz83YjNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuLi9pbWFnZS9ibHVlLW1vdW50YWluLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI2FwcCA+IG5hdiB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWluLWhlaWdodDogMjAwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19ffSk7XHJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xyXG59XHJcblxyXG4jbGVmdEhlYWRlciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XHJcbiAgICBtYXgtd2lkdGg6IDYwJTtcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcbn1cclxuXHJcbiN0b2RvSGVhZGVyIHtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xyXG5cclxuICAgICYgaDEge1xyXG4gICAgICAgIG1hcmdpbjogMCAwIDIwcHggMDtcclxuICAgIH1cclxufVxyXG5cclxuI2N1cnJlbnREYXRlIHtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gICAgY29sb3I6IGxpZ2h0Z3JheTtcclxuICAgIGZvbnQtc2l6ZTogMC44NXJlbTtcclxufVxyXG5cclxuI3JpZ2h0SGVhZGVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgd2lkdGg6IDQwJTtcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcblxyXG4gICAgLyogY3NzIGdsYXNzIGVmZmVjdCAqL1xyXG4gICAgYmFja2dyb3VuZDogcmdiYSg3MywgNTYsIDEzNywgMC4yNik7XHJcbiAgICBib3gtc2hhZG93OiAwIDRweCAzMHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxcHgpO1xyXG4gICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoMXB4KTtcclxuXHJcbiAgICAjdG9kb1Rhc2tTdGF0dXNlcyB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgICAgICAgI2NvbXBsZXRlZFRhc2tzLFxyXG4gICAgICAgICNpbmNvbXBsZXRlVGFza3Mge1xyXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICNjb21wbGV0ZWRUYXNrcyAubnVtYmVyLFxyXG4gICAgICAgICNpbmNvbXBsZXRlVGFza3MgLm51bWJlciB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS42cmVtO1xyXG4gICAgICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAjY29tcGxldGVkVGFza3Mge1xyXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAjY29tcGxldGlvblBlcmNlbnRhZ2UgcCB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG59XHJcbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9uYXYtc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQiw4QkFBOEI7SUFDOUIsV0FBVztJQUNYLGlCQUFpQjtJQUNqQix5REFBbUQ7SUFDbkQsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0Qix5QkFBeUI7SUFDekIsY0FBYztJQUNkLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osaUJBQWlCOztJQUVqQjtRQUNJLGtCQUFrQjtJQUN0QjtBQUNKOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixVQUFVO0lBQ1YsYUFBYTs7SUFFYixxQkFBcUI7SUFDckIsbUNBQW1DO0lBQ25DLHlDQUF5QztJQUN6QywwQkFBMEI7SUFDMUIsa0NBQWtDOztJQUVsQztRQUNJLGFBQWE7O1FBRWI7O1lBRUksaUJBQWlCO1FBQ3JCOztRQUVBOztZQUVJLGlCQUFpQjtZQUNqQixZQUFZO1lBQ1osZ0JBQWdCO1FBQ3BCOztRQUVBO1lBQ0ksbUJBQW1CO1FBQ3ZCO0lBQ0o7O0lBRUE7UUFDSSxrQkFBa0I7SUFDdEI7QUFDSlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIjYXBwID4gbmF2IHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgbWluLWhlaWdodDogMjAwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiLi4vaW1hZ2UvYmx1ZS1tb3VudGFpbi5qcGdcXFwiKTtcXHJcXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXHJcXG59XFxyXFxuXFxyXFxuI2xlZnRIZWFkZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcclxcbiAgICBtYXgtd2lkdGg6IDYwJTtcXHJcXG4gICAgcGFkZGluZzogMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuI3RvZG9IZWFkZXIge1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS42cmVtO1xcclxcblxcclxcbiAgICAmIGgxIHtcXHJcXG4gICAgICAgIG1hcmdpbjogMCAwIDIwcHggMDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4jY3VycmVudERhdGUge1xcclxcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcclxcbiAgICBjb2xvcjogbGlnaHRncmF5O1xcclxcbiAgICBmb250LXNpemU6IDAuODVyZW07XFxyXFxufVxcclxcblxcclxcbiNyaWdodEhlYWRlciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIHdpZHRoOiA0MCU7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuXFxyXFxuICAgIC8qIGNzcyBnbGFzcyBlZmZlY3QgKi9cXHJcXG4gICAgYmFja2dyb3VuZDogcmdiYSg3MywgNTYsIDEzNywgMC4yNik7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgNHB4IDMwcHggcmdiYSgwLCAwLCAwLCAwLjEpO1xcclxcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMXB4KTtcXHJcXG4gICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoMXB4KTtcXHJcXG5cXHJcXG4gICAgI3RvZG9UYXNrU3RhdHVzZXMge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG5cXHJcXG4gICAgICAgICNjb21wbGV0ZWRUYXNrcyxcXHJcXG4gICAgICAgICNpbmNvbXBsZXRlVGFza3Mge1xcclxcbiAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgI2NvbXBsZXRlZFRhc2tzIC5udW1iZXIsXFxyXFxuICAgICAgICAjaW5jb21wbGV0ZVRhc2tzIC5udW1iZXIge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS42cmVtO1xcclxcbiAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgICAgICAgICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgI2NvbXBsZXRlZFRhc2tzIHtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICNjb21wbGV0aW9uUGVyY2VudGFnZSBwIHtcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///600\n')},654:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(72);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(56);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/css/main.css\nvar main = __webpack_require__(944);\n;// ./src/css/main.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, "head");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(main/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const css_main = (main/* default */.A && main/* default */.A.locals ? main/* default */.A.locals : undefined);\n\n;// ./src/script/constants.js\nconst taskConst = Object.freeze({\n  PROPERTY: {\n    STATUS: "status",\n    PRIORITY: "priority"\n  },\n  STATUS: {\n    INCOMPLETE: "incomplete",\n    INPROGRESS: "inprogress",\n    COMPLETE: "complete"\n  },\n  PRIORITY: {\n    LOW: "low",\n    MEDIUM: "medium",\n    HIGH: "high",\n    EXTREME: "extreme"\n  }\n});\n\n// default task icon should be checkmark\nconst MATERIAL_ICONS = Object.freeze(["check",\n//default\n"alarm", "bookmark", "calculate", "code", "delete", "edit", "group", "home", "mail", "phone", "settings", "star", "task"]);\n\n;// ./src/script/todo.js\n\nclass Todo {\n  constructor(icon, name) {\n    this.icon = icon;\n    this.name = name;\n    this.tasks = [];\n  }\n  getTask(index) {\n    return this.tasks[index];\n  }\n  addTask(task) {\n    return this.tasks.push(task);\n  }\n  deleteTask(index) {\n    if (index > -1 && index < this.tasks.length) {\n      this.tasks.splice(index, 1);\n    }\n  }\n  getTaskCount() {\n    let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : taskConst.PROPERTY.STATUS;\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : taskConst.STATUS.INCOMPLETE;\n    let count = 0;\n    for (let task of this.tasks) {\n      const PROPERTIES = Object.values(taskConst.PROPERTY);\n      if (!PROPERTIES.includes(property)) {\n        throw new Error("Unidentified property");\n      }\n      if (task[property] === value) {\n        count++;\n      }\n    }\n    return count;\n  }\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/formatDistance.js\nconst formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: "less than a second",\n    other: "less than {{count}} seconds",\n  },\n\n  xSeconds: {\n    one: "1 second",\n    other: "{{count}} seconds",\n  },\n\n  halfAMinute: "half a minute",\n\n  lessThanXMinutes: {\n    one: "less than a minute",\n    other: "less than {{count}} minutes",\n  },\n\n  xMinutes: {\n    one: "1 minute",\n    other: "{{count}} minutes",\n  },\n\n  aboutXHours: {\n    one: "about 1 hour",\n    other: "about {{count}} hours",\n  },\n\n  xHours: {\n    one: "1 hour",\n    other: "{{count}} hours",\n  },\n\n  xDays: {\n    one: "1 day",\n    other: "{{count}} days",\n  },\n\n  aboutXWeeks: {\n    one: "about 1 week",\n    other: "about {{count}} weeks",\n  },\n\n  xWeeks: {\n    one: "1 week",\n    other: "{{count}} weeks",\n  },\n\n  aboutXMonths: {\n    one: "about 1 month",\n    other: "about {{count}} months",\n  },\n\n  xMonths: {\n    one: "1 month",\n    other: "{{count}} months",\n  },\n\n  aboutXYears: {\n    one: "about 1 year",\n    other: "about {{count}} years",\n  },\n\n  xYears: {\n    one: "1 year",\n    other: "{{count}} years",\n  },\n\n  overXYears: {\n    one: "over 1 year",\n    other: "over {{count}} years",\n  },\n\n  almostXYears: {\n    one: "almost 1 year",\n    other: "almost {{count}} years",\n  },\n};\n\nconst formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === "string") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace("{{count}}", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return "in " + result;\n    } else {\n      return result + " ago";\n    }\n  }\n\n  return result;\n};\n\n;// ./node_modules/date-fns/locale/_lib/buildFormatLongFn.js\nfunction buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/formatLong.js\n\n\nconst dateFormats = {\n  full: "EEEE, MMMM do, y",\n  long: "MMMM do, y",\n  medium: "MMM d, y",\n  short: "MM/dd/yyyy",\n};\n\nconst timeFormats = {\n  full: "h:mm:ss a zzzz",\n  long: "h:mm:ss a z",\n  medium: "h:mm:ss a",\n  short: "h:mm a",\n};\n\nconst dateTimeFormats = {\n  full: "{{date}} \'at\' {{time}}",\n  long: "{{date}} \'at\' {{time}}",\n  medium: "{{date}}, {{time}}",\n  short: "{{date}}, {{time}}",\n};\n\nconst formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: "full",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: "full",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: "full",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/en-US/_lib/formatRelative.js\nconst formatRelativeLocale = {\n  lastWeek: "\'last\' eeee \'at\' p",\n  yesterday: "\'yesterday at\' p",\n  today: "\'today at\' p",\n  tomorrow: "\'tomorrow at\' p",\n  nextWeek: "eeee \'at\' p",\n  other: "P",\n};\n\nconst formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n\n;// ./node_modules/date-fns/locale/_lib/buildLocalizeFn.js\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don\'t start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nfunction buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : "standalone";\n\n    let valuesArray;\n    if (context === "formatting" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don\'t want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/localize.js\n\n\nconst eraValues = {\n  narrow: ["B", "A"],\n  abbreviated: ["BC", "AD"],\n  wide: ["Before Christ", "Anno Domini"],\n};\n\nconst quarterValues = {\n  narrow: ["1", "2", "3", "4"],\n  abbreviated: ["Q1", "Q2", "Q3", "Q4"],\n  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you\'re working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],\n  abbreviated: [\n    "Jan",\n    "Feb",\n    "Mar",\n    "Apr",\n    "May",\n    "Jun",\n    "Jul",\n    "Aug",\n    "Sep",\n    "Oct",\n    "Nov",\n    "Dec",\n  ],\n\n  wide: [\n    "January",\n    "February",\n    "March",\n    "April",\n    "May",\n    "June",\n    "July",\n    "August",\n    "September",\n    "October",\n    "November",\n    "December",\n  ],\n};\n\nconst dayValues = {\n  narrow: ["S", "M", "T", "W", "T", "F", "S"],\n  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],\n  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],\n  wide: [\n    "Sunday",\n    "Monday",\n    "Tuesday",\n    "Wednesday",\n    "Thursday",\n    "Friday",\n    "Saturday",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be \'year\', \'quarter\', \'month\', \'week\', \'date\', \'dayOfYear\',\n  // \'day\', \'hour\', \'minute\', \'second\'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + "st";\n      case 2:\n        return number + "nd";\n      case 3:\n        return number + "rd";\n    }\n  }\n  return number + "th";\n};\n\nconst localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: "wide",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: "wide",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: "wide",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: "wide",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: "wide",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: "wide",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/_lib/buildMatchFn.js\nfunction buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\n;// ./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js\nfunction buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\n;// ./node_modules/date-fns/locale/en-US/_lib/match.js\n\n\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nconst match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: "any",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: "wide",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: "any",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: "any",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: "any",\n  }),\n};\n\n;// ./node_modules/date-fns/locale/en-US.js\n\n\n\n\n\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nconst enUS = {\n  code: "en-US",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\n/* harmony default export */ const en_US = ((/* unused pure expression or super */ null && (enUS)));\n\n;// ./node_modules/date-fns/_lib/format/longFormatters.js\nconst dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case "P":\n      return formatLong.date({ width: "short" });\n    case "PP":\n      return formatLong.date({ width: "medium" });\n    case "PPP":\n      return formatLong.date({ width: "long" });\n    case "PPPP":\n    default:\n      return formatLong.date({ width: "full" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case "p":\n      return formatLong.time({ width: "short" });\n    case "pp":\n      return formatLong.time({ width: "medium" });\n    case "ppp":\n      return formatLong.time({ width: "long" });\n    case "pppp":\n    default:\n      return formatLong.time({ width: "full" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case "P":\n      dateTimeFormat = formatLong.dateTime({ width: "short" });\n      break;\n    case "PP":\n      dateTimeFormat = formatLong.dateTime({ width: "medium" });\n      break;\n    case "PPP":\n      dateTimeFormat = formatLong.dateTime({ width: "long" });\n      break;\n    case "PPPP":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: "full" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace("{{date}}", dateLongFormatter(datePattern, formatLong))\n    .replace("{{time}}", timeLongFormatter(timePattern, formatLong));\n};\n\nconst longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n\n;// ./node_modules/date-fns/_lib/protectedTokens.js\nconst dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = ["D", "DD", "YY", "YYYY"];\n\nfunction isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nfunction isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nfunction warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === "Y" ? "years" : "days of the month";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n\n;// ./node_modules/date-fns/constants.js\n/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from "./constants/date-fns/constants";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nconst daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nconst daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from "./constants/date-fns/constants";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nconst maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from "./constants/date-fns/constants";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nconst minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nconst millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nconst millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nconst millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nconst millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nconst millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nconst minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nconst minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nconst minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nconst minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nconst monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nconst monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nconst quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nconst secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nconst secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nconst secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nconst secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nconst secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nconst secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nconst secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It\'s useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nconst constructFromSymbol = Symbol.for("constructDateFrom");\n\n;// ./node_modules/date-fns/constructFrom.js\n\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for("constructDateFrom")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It\'s useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from "./constructFrom/date-fns";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nfunction constructFrom(date, value) {\n  if (typeof date === "function") return date(value);\n\n  if (date && typeof date === "object" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_constructFrom = ((/* unused pure expression or super */ null && (constructFrom)));\n\n;// ./node_modules/date-fns/_lib/defaultOptions.js\nlet defaultOptions = {};\n\nfunction getDefaultOptions() {\n  return defaultOptions;\n}\n\nfunction setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n\n;// ./node_modules/date-fns/getDefaultOptions.js\n\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nfunction getDefaultOptions_getDefaultOptions() {\n  return Object.assign({}, getDefaultOptions());\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getDefaultOptions = ((/* unused pure expression or super */ null && (getDefaultOptions_getDefaultOptions)));\n\n;// ./node_modules/date-fns/toDate.js\n\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for("constructDateFrom")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It\'s useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_toDate = ((/* unused pure expression or super */ null && (toDate)));\n\n;// ./node_modules/date-fns/transpose.js\n\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam InputDate - The input `Date` type derived from the passed argument.\n * @typeParam ResultDate - The result `Date` type derived from the passed constructor.\n *\n * @param date - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> \'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)\'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> \'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)\'\n */\nfunction transpose(date, constructor) {\n  const date_ = isConstructor(constructor)\n    ? new constructor(0)\n    : constructFrom(constructor, 0);\n  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  date_.setHours(\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    date.getMilliseconds(),\n  );\n  return date_;\n}\n\nfunction isConstructor(constructor) {\n  return (\n    typeof constructor === "function" &&\n    constructor.prototype?.constructor === constructor\n  );\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_transpose = ((/* unused pure expression or super */ null && (transpose)));\n\n;// ./node_modules/date-fns/parse/_lib/Setter.js\n\n\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nclass Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nclass ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nclass DateTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n\n  constructor(context, reference) {\n    super();\n    this.context = context || ((date) => constructFrom(reference, date));\n  }\n\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, this.context));\n  }\n}\n\n;// ./node_modules/date-fns/parse/_lib/Parser.js\n\n\nclass Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/EraParser.js\n\n\nclass EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case "G":\n      case "GG":\n      case "GGG":\n        return (\n          match.era(dateString, { width: "abbreviated" }) ||\n          match.era(dateString, { width: "narrow" })\n        );\n\n      // A, B\n      case "GGGGG":\n        return match.era(dateString, { width: "narrow" });\n      // Anno Domini, Before Christ\n      case "GGGG":\n      default:\n        return (\n          match.era(dateString, { width: "wide" }) ||\n          match.era(dateString, { width: "abbreviated" }) ||\n          match.era(dateString, { width: "narrow" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["R", "u", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/constants.js\nconst numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nconst timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n\n;// ./node_modules/date-fns/parse/_lib/utils.js\n\n\n\n\nfunction mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nfunction parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nfunction parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is \'Z\'\n  if (matchResult[0] === "Z") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === "+" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nfunction parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nfunction parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp("^\\\\d{1," + n + "}"), dateString);\n  }\n}\n\nfunction parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp("^-?\\\\d{1," + n + "}"), dateString);\n  }\n}\n\nfunction dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case "morning":\n      return 4;\n    case "evening":\n      return 17;\n    case "pm":\n    case "noon":\n    case "afternoon":\n      return 12;\n    case "am":\n    case "midnight":\n    case "night":\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/YearParser.js\n\n\n\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nclass YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === "yy",\n    });\n\n    switch (token) {\n      case "y":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case "yo":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "year",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n\n;// ./node_modules/date-fns/startOfWeek.js\n\n\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfWeek = ((/* unused pure expression or super */ null && (startOfWeek)));\n\n;// ./node_modules/date-fns/getWeekYear.js\n\n\n\n\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nfunction getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getWeekYear = ((/* unused pure expression or super */ null && (getWeekYear)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js\n\n\n\n\n\n\n\n// Local week-numbering year\nclass LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === "YY",\n    });\n\n    switch (token) {\n      case "Y":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case "Yo":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "year",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    "y",\n    "R",\n    "u",\n    "Q",\n    "q",\n    "M",\n    "L",\n    "I",\n    "d",\n    "D",\n    "i",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/startOfISOWeek.js\n\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfISOWeek = ((/* unused pure expression or super */ null && (startOfISOWeek)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js\n\n\n\n\n\n\n// ISO week-numbering year\nclass ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === "R") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    "G",\n    "y",\n    "Y",\n    "u",\n    "Q",\n    "q",\n    "M",\n    "L",\n    "w",\n    "d",\n    "D",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js\n\n\n\n\nclass ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === "u") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/QuarterParser.js\n\n\n\n\nclass QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case "Q":\n      case "QQ": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case "Qo":\n        return match.ordinalNumber(dateString, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "QQQ":\n        return (\n          match.quarter(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.quarter(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "QQQQQ":\n        return match.quarter(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "QQQQ":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: "wide",\n            context: "formatting",\n          }) ||\n          match.quarter(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.quarter(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "q",\n    "M",\n    "L",\n    "w",\n    "I",\n    "d",\n    "D",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js\n\n\n\n\nclass StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case "q":\n      case "qq": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case "qo":\n        return match.ordinalNumber(dateString, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "qqq":\n        return (\n          match.quarter(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.quarter(dateString, {\n            width: "narrow",\n            context: "standalone",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "qqqqq":\n        return match.quarter(dateString, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "qqqq":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: "wide",\n            context: "standalone",\n          }) ||\n          match.quarter(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.quarter(dateString, {\n            width: "narrow",\n            context: "standalone",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "Q",\n    "M",\n    "L",\n    "w",\n    "I",\n    "d",\n    "D",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/MonthParser.js\n\n\n\n\n\nclass MonthParser extends Parser {\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "q",\n    "Q",\n    "L",\n    "w",\n    "I",\n    "D",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case "M":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case "MM":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case "Mo":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "month",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case "MMM":\n        return (\n          match.month(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.month(dateString, { width: "narrow", context: "formatting" })\n        );\n\n      // J, F, ..., D\n      case "MMMMM":\n        return match.month(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // January, February, ..., December\n      case "MMMM":\n      default:\n        return (\n          match.month(dateString, { width: "wide", context: "formatting" }) ||\n          match.month(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.month(dateString, { width: "narrow", context: "formatting" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js\n\n\n\n\n\nclass StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case "L":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case "LL":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case "Lo":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "month",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case "LLL":\n        return (\n          match.month(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.month(dateString, { width: "narrow", context: "standalone" })\n        );\n\n      // J, F, ..., D\n      case "LLLLL":\n        return match.month(dateString, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // January, February, ..., December\n      case "LLLL":\n      default:\n        return (\n          match.month(dateString, { width: "wide", context: "standalone" }) ||\n          match.month(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.month(dateString, { width: "narrow", context: "standalone" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "q",\n    "Q",\n    "M",\n    "w",\n    "I",\n    "D",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/startOfWeekYear.js\n\n\n\n\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfWeekYear = ((/* unused pure expression or super */ null && (startOfWeekYear)));\n\n;// ./node_modules/date-fns/getWeek.js\n\n\n\n\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nfunction getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getWeek = ((/* unused pure expression or super */ null && (getWeek)));\n\n;// ./node_modules/date-fns/setWeek.js\n\n\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nfunction setWeek(date, week, options) {\n  const date_ = toDate(date, options?.in);\n  const diff = getWeek(date_, options) - week;\n  date_.setDate(date_.getDate() - diff * 7);\n  return toDate(date_, options?.in);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_setWeek = ((/* unused pure expression or super */ null && (setWeek)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js\n\n\n\n\n\n\n\n// Local week of year\nclass LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "w":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case "wo":\n        return match.ordinalNumber(dateString, { unit: "week" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    "y",\n    "R",\n    "u",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "I",\n    "d",\n    "D",\n    "i",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/getISOWeekYear.js\n\n\n\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year\'s first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nfunction getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getISOWeekYear = ((/* unused pure expression or super */ null && (getISOWeekYear)));\n\n;// ./node_modules/date-fns/startOfISOWeekYear.js\n\n\n\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year\'s first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfISOWeekYear = ((/* unused pure expression or super */ null && (startOfISOWeekYear)));\n\n;// ./node_modules/date-fns/getISOWeek.js\n\n\n\n\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nfunction getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getISOWeek = ((/* unused pure expression or super */ null && (getISOWeek)));\n\n;// ./node_modules/date-fns/setISOWeek.js\n\n\n\n/**\n * The {@link setISOWeek} function options.\n */\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The `Date` type of the context function.\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nfunction setISOWeek(date, week, options) {\n  const _date = toDate(date, options?.in);\n  const diff = getISOWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_setISOWeek = ((/* unused pure expression or super */ null && (setISOWeek)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js\n\n\n\n\n\n\n\n// ISO week of year\nclass ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "I":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case "Io":\n        return match.ordinalNumber(dateString, { unit: "week" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    "y",\n    "Y",\n    "u",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "w",\n    "d",\n    "D",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/DateParser.js\n\n\n\n\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nclass DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "d":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case "do":\n        return match.ordinalNumber(dateString, { unit: "date" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "q",\n    "Q",\n    "w",\n    "I",\n    "D",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js\n\n\n\n\n\nclass DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "D":\n      case "DD":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case "Do":\n        return match.ordinalNumber(dateString, { unit: "date" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "Y",\n    "R",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "w",\n    "I",\n    "d",\n    "E",\n    "i",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/addDays.js\n\n\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nfunction addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_addDays = ((/* unused pure expression or super */ null && (addDays)));\n\n;// ./node_modules/date-fns/setDay.js\n\n\n\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nfunction setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const date_ = toDate(date, options?.in);\n  const currentDay = date_.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_setDay = ((/* unused pure expression or super */ null && (setDay)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/DayParser.js\n\n\n\n// Day of week\nclass DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case "E":\n      case "EE":\n      case "EEE":\n        return (\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n\n      // T\n      case "EEEEE":\n        return match.day(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "EEEEEE":\n        return (\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n\n      // Tuesday\n      case "EEEE":\n      default:\n        return (\n          match.day(dateString, { width: "wide", context: "formatting" }) ||\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["D", "i", "e", "c", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js\n\n\n\n\n\n// Local day of week\nclass LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case "e":\n      case "ee": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case "eo":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "day",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case "eee":\n        return (\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n\n      // T\n      case "eeeee":\n        return match.day(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "eeeeee":\n        return (\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n\n      // Tuesday\n      case "eeee":\n      default:\n        return (\n          match.day(dateString, { width: "wide", context: "formatting" }) ||\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.day(dateString, { width: "short", context: "formatting" }) ||\n          match.day(dateString, { width: "narrow", context: "formatting" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "y",\n    "R",\n    "u",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "I",\n    "d",\n    "D",\n    "E",\n    "i",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js\n\n\n\n\n\n// Stand-alone local day of week\nclass StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case "c":\n      case "cc": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case "co":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: "day",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case "ccc":\n        return (\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.day(dateString, { width: "short", context: "standalone" }) ||\n          match.day(dateString, { width: "narrow", context: "standalone" })\n        );\n\n      // T\n      case "ccccc":\n        return match.day(dateString, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // Tu\n      case "cccccc":\n        return (\n          match.day(dateString, { width: "short", context: "standalone" }) ||\n          match.day(dateString, { width: "narrow", context: "standalone" })\n        );\n\n      // Tuesday\n      case "cccc":\n      default:\n        return (\n          match.day(dateString, { width: "wide", context: "standalone" }) ||\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "standalone",\n          }) ||\n          match.day(dateString, { width: "short", context: "standalone" }) ||\n          match.day(dateString, { width: "narrow", context: "standalone" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "y",\n    "R",\n    "u",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "I",\n    "d",\n    "D",\n    "E",\n    "i",\n    "e",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/getISODay.js\n\n\n/**\n * The {@link getISODay} function options.\n */\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nfunction getISODay(date, options) {\n  const day = toDate(date, options?.in).getDay();\n  return day === 0 ? 7 : day;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getISODay = ((/* unused pure expression or super */ null && (getISODay)));\n\n;// ./node_modules/date-fns/setISODay.js\n\n\n\n\n/**\n * The {@link setISODay} function options.\n */\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday, etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nfunction setISODay(date, day, options) {\n  const date_ = toDate(date, options?.in);\n  const currentDay = getISODay(date_, options);\n  const diff = day - currentDay;\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_setISODay = ((/* unused pure expression or super */ null && (setISODay)));\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ISODayParser.js\n\n\n\n\n\n// ISO day of week\nclass ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case "i":\n      case "ii": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case "io":\n        return match.ordinalNumber(dateString, { unit: "day" });\n      // Tue\n      case "iii":\n        return mapValue(\n          match.day(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n            match.day(dateString, {\n              width: "short",\n              context: "formatting",\n            }) ||\n            match.day(dateString, {\n              width: "narrow",\n              context: "formatting",\n            }),\n          valueCallback,\n        );\n      // T\n      case "iiiii":\n        return mapValue(\n          match.day(dateString, {\n            width: "narrow",\n            context: "formatting",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case "iiiiii":\n        return mapValue(\n          match.day(dateString, {\n            width: "short",\n            context: "formatting",\n          }) ||\n            match.day(dateString, {\n              width: "narrow",\n              context: "formatting",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case "iiii":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: "wide",\n            context: "formatting",\n          }) ||\n            match.day(dateString, {\n              width: "abbreviated",\n              context: "formatting",\n            }) ||\n            match.day(dateString, {\n              width: "short",\n              context: "formatting",\n            }) ||\n            match.day(dateString, {\n              width: "narrow",\n              context: "formatting",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    "y",\n    "Y",\n    "u",\n    "q",\n    "Q",\n    "M",\n    "L",\n    "w",\n    "d",\n    "D",\n    "E",\n    "e",\n    "c",\n    "t",\n    "T",\n  ];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/AMPMParser.js\n\n\n\n\nclass AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "a":\n      case "aa":\n      case "aaa":\n        return (\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n\n      case "aaaaa":\n        return match.dayPeriod(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "aaaa":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: "wide",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["b", "B", "H", "k", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js\n\n\n\n\nclass AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "b":\n      case "bb":\n      case "bbb":\n        return (\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n\n      case "bbbbb":\n        return match.dayPeriod(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "bbbb":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: "wide",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["a", "B", "H", "k", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js\n\n\n\n\n// in the morning, in the afternoon, in the evening, at night\nclass DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "B":\n      case "BB":\n      case "BBB":\n        return (\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n\n      case "BBBBB":\n        return match.dayPeriod(dateString, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "BBBB":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: "wide",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "abbreviated",\n            context: "formatting",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: "narrow",\n            context: "formatting",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["a", "b", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js\n\n\n\n\n\nclass Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "h":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case "ho":\n        return match.ordinalNumber(dateString, { unit: "hour" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = ["H", "K", "k", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js\n\n\n\n\n\nclass Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "H":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case "Ho":\n        return match.ordinalNumber(dateString, { unit: "hour" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["a", "b", "h", "K", "k", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js\n\n\n\n\n\nclass Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "K":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case "Ko":\n        return match.ordinalNumber(dateString, { unit: "hour" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = ["h", "H", "k", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js\n\n\n\n\n\nclass Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "k":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case "ko":\n        return match.ordinalNumber(dateString, { unit: "hour" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["a", "b", "h", "H", "K", "t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/MinuteParser.js\n\n\n\n\n\nclass MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "m":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case "mo":\n        return match.ordinalNumber(dateString, { unit: "minute" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/SecondParser.js\n\n\n\n\n\nclass SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case "s":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case "so":\n        return match.ordinalNumber(dateString, { unit: "second" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = ["t", "T"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js\n\n\n\n\nclass FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.trunc(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = ["t", "T"];\n}\n\n;// ./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js\n\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for \'Europe/Prague\' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nfunction getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js\n\n\n\n\n\n\n\n// Timezone (ISO-8601. +00:00 is `\'Z\'`)\nclass ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case "X":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case "XX":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case "XXXX":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case "XXXXX":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case "XXX":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = ["t", "T", "x"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js\n\n\n\n\n\n\n\n// Timezone (ISO-8601)\nclass ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case "x":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case "xx":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case "xxxx":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case "xxxxx":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case "xxx":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = ["t", "T", "X"];\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js\n\n\n\n\n\nclass TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = "*";\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js\n\n\n\n\n\nclass TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = "*";\n}\n\n;// ./node_modules/date-fns/parse/_lib/parsers.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\nconst parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n\n;// ./node_modules/date-fns/parse.js\n\n\n\n\n\n\n\n\n\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - \'\' matches two quote characters in a row\n// - \'(\'\'|[^\'])+(\'|$) matches anything surrounded by two quote characters (\'),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\nconst escapedStringRegExp = /^\'([^]*?)\'?$/;\nconst doubleQuoteRegExp = /\'\'/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (\') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a \'real\' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don\'t make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse(\'23 AM\', \'HH a\', new Date())\n * //=> RangeError: The format string mustn\'t contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as "stand-alone" units, but are different in some languages.\n *    "Formatting" units are declined according to the rules of the language\n *    in the context of a date. "Stand-alone" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), \'do LLLL\', {locale: cs}) //=> \'6. listopad\'`\n *\n *    `format(new Date(2017, 10, 6), \'do MMMM\', {locale: cs}) //=> \'6. listopadu\'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangeably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with "2" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse(\'50\', \'yy\', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse(\'75\', \'yy\', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse(\'50\', \'uu\', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse(\'75\', \'uu\', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit\'s priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string \'January 1st\' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you\'re not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse(\'02/11/2014\', \'MM/dd/yyyy\', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse(\'02/11/2014\', \'MM/dd/yyyy\', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from \'date-fns/locale/eo\'\n * var result = parse(\'28-a de februaro\', "do \'de\' MMMM", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nfunction parse(dateStr, formatStr, referenceDate, options) {\n  const invalidDate = () => constructFrom(options?.in || referenceDate, NaN);\n  const defaultOptions = getDefaultOptions_getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? enUS;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (!formatStr)\n    return dateStr ? invalidDate() : toDate(referenceDate, options?.in);\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn\'t specified, it will try to use the context or\n  // the reference date and fallback to the system time zone.\n  const setters = [new DateTimezoneSetter(options?.in, referenceDate)];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join("")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn\'t contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn\'t contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return invalidDate();\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          "Format string contains an unescaped latin alphabet character `" +\n            firstCharacter +\n            "`",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === "\'\'") {\n        token = "\'";\n      } else if (firstCharacter === "\'") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn\'t match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return invalidDate();\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return invalidDate();\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate, options?.in);\n\n  if (isNaN(+date)) return invalidDate();\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return invalidDate();\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return date;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "\'");\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_parse = ((/* unused pure expression or super */ null && (parse)));\n\n;// ./node_modules/date-fns/_lib/normalizeDates.js\n\n\nfunction normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === "object"),\n  );\n  return dates.map(normalize);\n}\n\n;// ./node_modules/date-fns/startOfDay.js\n\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfDay = ((/* unused pure expression or super */ null && (startOfDay)));\n\n;// ./node_modules/date-fns/differenceInCalendarDays.js\n\n\n\n\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nfunction differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it\'s different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_differenceInCalendarDays = ((/* unused pure expression or super */ null && (differenceInCalendarDays)));\n\n;// ./node_modules/date-fns/startOfYear.js\n\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nfunction startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_startOfYear = ((/* unused pure expression or super */ null && (startOfYear)));\n\n;// ./node_modules/date-fns/getDayOfYear.js\n\n\n\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nfunction getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_getDayOfYear = ((/* unused pure expression or super */ null && (getDayOfYear)));\n\n;// ./node_modules/date-fns/_lib/addLeadingZeros.js\nfunction addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? "-" : "";\n  const output = Math.abs(number).toString().padStart(targetLength, "0");\n  return sign + output;\n}\n\n;// ./node_modules/date-fns/_lib/format/lightFormatters.js\n\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nconst lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";\n\n    switch (token) {\n      case "a":\n      case "aa":\n        return dayPeriodEnumValue.toUpperCase();\n      case "aaa":\n        return dayPeriodEnumValue;\n      case "aaaaa":\n        return dayPeriodEnumValue[0];\n      case "aaaa":\n      default:\n        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n\n;// ./node_modules/date-fns/_lib/format/formatters.js\n\n\n\n\n\n\n\n\n\nconst dayPeriodEnum = {\n  am: "am",\n  pm: "pm",\n  midnight: "midnight",\n  noon: "noon",\n  morning: "morning",\n  afternoon: "afternoon",\n  evening: "evening",\n  night: "night",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nconst formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case "G":\n      case "GG":\n      case "GGG":\n        return localize.era(era, { width: "abbreviated" });\n      // A, B\n      case "GGGGG":\n        return localize.era(era, { width: "narrow" });\n      // Anno Domini, Before Christ\n      case "GGGG":\n      default:\n        return localize.era(era, { width: "wide" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === "yo") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: "year" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === "YY") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === "Yo") {\n      return localize.ordinalNumber(weekYear, { unit: "year" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case "Q":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case "QQ":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case "Qo":\n        return localize.ordinalNumber(quarter, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "QQQ":\n        return localize.quarter(quarter, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "QQQQQ":\n        return localize.quarter(quarter, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "QQQQ":\n      default:\n        return localize.quarter(quarter, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case "q":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case "qq":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case "qo":\n        return localize.ordinalNumber(quarter, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "qqq":\n        return localize.quarter(quarter, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "qqqqq":\n        return localize.quarter(quarter, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "qqqq":\n      default:\n        return localize.quarter(quarter, {\n          width: "wide",\n          context: "standalone",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case "M":\n      case "MM":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case "Mo":\n        return localize.ordinalNumber(month + 1, { unit: "month" });\n      // Jan, Feb, ..., Dec\n      case "MMM":\n        return localize.month(month, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // J, F, ..., D\n      case "MMMMM":\n        return localize.month(month, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // January, February, ..., December\n      case "MMMM":\n      default:\n        return localize.month(month, { width: "wide", context: "formatting" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case "L":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case "LL":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case "Lo":\n        return localize.ordinalNumber(month + 1, { unit: "month" });\n      // Jan, Feb, ..., Dec\n      case "LLL":\n        return localize.month(month, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // J, F, ..., D\n      case "LLLLL":\n        return localize.month(month, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // January, February, ..., December\n      case "LLLL":\n      default:\n        return localize.month(month, { width: "wide", context: "standalone" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === "wo") {\n      return localize.ordinalNumber(week, { unit: "week" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === "Io") {\n      return localize.ordinalNumber(isoWeek, { unit: "week" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === "do") {\n      return localize.ordinalNumber(date.getDate(), { unit: "date" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === "Do") {\n      return localize.ordinalNumber(dayOfYear, { unit: "dayOfYear" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case "E":\n      case "EE":\n      case "EEE":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "EEEEE":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "EEEEEE":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "EEEE":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case "e":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case "ee":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case "eo":\n        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });\n      case "eee":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "eeeee":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "eeeeee":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "eeee":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case "c":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case "cc":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case "co":\n        return localize.ordinalNumber(localDayOfWeek, { unit: "day" });\n      case "ccc":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "standalone",\n        });\n      // T\n      case "ccccc":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "standalone",\n        });\n      // Tu\n      case "cccccc":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "standalone",\n        });\n      // Tuesday\n      case "cccc":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "standalone",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case "i":\n        return String(isoDayOfWeek);\n      // 02\n      case "ii":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case "io":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: "day" });\n      // Tue\n      case "iii":\n        return localize.day(dayOfWeek, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      // T\n      case "iiiii":\n        return localize.day(dayOfWeek, {\n          width: "narrow",\n          context: "formatting",\n        });\n      // Tu\n      case "iiiiii":\n        return localize.day(dayOfWeek, {\n          width: "short",\n          context: "formatting",\n        });\n      // Tuesday\n      case "iiii":\n      default:\n        return localize.day(dayOfWeek, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";\n\n    switch (token) {\n      case "a":\n      case "aa":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "aaa":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: "abbreviated",\n            context: "formatting",\n          })\n          .toLowerCase();\n      case "aaaaa":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "aaaa":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";\n    }\n\n    switch (token) {\n      case "b":\n      case "bb":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "bbb":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: "abbreviated",\n            context: "formatting",\n          })\n          .toLowerCase();\n      case "bbbbb":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "bbbb":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case "B":\n      case "BB":\n      case "BBB":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "abbreviated",\n          context: "formatting",\n        });\n      case "BBBBB":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "narrow",\n          context: "formatting",\n        });\n      case "BBBB":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: "wide",\n          context: "formatting",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === "ho") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === "Ho") {\n      return localize.ordinalNumber(date.getHours(), { unit: "hour" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === "Ko") {\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === "ko") {\n      return localize.ordinalNumber(hours, { unit: "hour" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === "mo") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: "minute" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === "so") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: "second" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `\'Z\'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return "Z";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case "X":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case "XXXX":\n      case "XX": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case "XXXXX":\n      case "XXX": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `\'+00:00\'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case "x":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case "xxxx":\n      case "xx": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case "xxxxx":\n      case "xxx": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case "O":\n      case "OO":\n      case "OOO":\n        return "GMT" + formatTimezoneShort(timezoneOffset, ":");\n      // Long\n      case "OOOO":\n      default:\n        return "GMT" + formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case "z":\n      case "zz":\n      case "zzz":\n        return "GMT" + formatTimezoneShort(timezoneOffset, ":");\n      // Long\n      case "zzzz":\n      default:\n        return "GMT" + formatTimezone(timezoneOffset, ":");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = "") {\n  const sign = offset > 0 ? "-" : "+";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? "-" : "+";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = "") {\n  const sign = offset > 0 ? "-" : "+";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\n;// ./node_modules/date-fns/isDate.js\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate(\'2014-02-31\')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nfunction isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === "object" &&\n      Object.prototype.toString.call(value) === "[object Date]")\n  );\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_isDate = ((/* unused pure expression or super */ null && (isDate)));\n\n;// ./node_modules/date-fns/isValid.js\n\n\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(\'\'))\n * //=> false\n */\nfunction isValid(date) {\n  return !((!isDate(date) && typeof date !== "number") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_isValid = ((/* unused pure expression or super */ null && (isValid)));\n\n;// ./node_modules/date-fns/format.js\n\n\n\n\n\n\n\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - \'\' matches two quote characters in a row\n// - \'(\'\'|[^\'])+(\'|$) matches anything surrounded by two quote characters (\'),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst format_formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst format_longFormattingTokensRegExp = /P+p+|P+|p+|\'\'|\'(\'\'|[^\'])+(\'|$)|./g;\n\nconst format_escapedStringRegExp = /^\'([^]*?)\'?$/;\nconst format_doubleQuoteRegExp = /\'\'/g;\nconst format_unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (\') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a \'real\' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as "stand-alone" units, but are different in some languages.\n *    "Formatting" units are declined according to the rules of the language\n *    in the context of a date. "Stand-alone" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), \'do LLLL\', {locale: cs}) //=> \'6. listopad\'`\n *\n *    `format(new Date(2017, 10, 6), \'do MMMM\', {locale: cs}) //=> \'6. listopadu\'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with "2" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), \'MMM\') //=> \'Nov\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMM\') //=> \'November\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMM\') //=> \'N\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMMM\') //=> \'November\'`\n *\n *    `format(new Date(2017, 10, 6), \'MMMMMMM\') //=> \'November\'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), \'yyyyyyyy\') //=> \'00002017\'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), \'MM/dd/yyyy\')\n * //=> \'02/11/2014\'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from \'date-fns/locale/eo\'\n * const result = format(new Date(2014, 6, 2), "do \'de\' MMMM yyyy", {\n *   locale: eoLocale\n * })\n * //=> \'2-a de julio 2014\'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), "h \'o\'\'clock\'")\n * //=> "3 o\'clock"\n */\nfunction format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? enUS;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError("Invalid time value");\n  }\n\n  let parts = formatStr\n    .match(format_longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === "p" || firstCharacter === "P") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join("")\n    .match(format_formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === "\'\'") {\n        return { isToken: false, value: "\'" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === "\'") {\n        return { isToken: false, value: format_cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(format_unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          "Format string contains an unescaped latin alphabet character `" +\n            firstCharacter +\n            "`",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join("");\n}\n\nfunction format_cleanEscapedString(input) {\n  const matched = input.match(format_escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(format_doubleQuoteRegExp, "\'");\n}\n\n// Fallback for modularized imports:\n/* harmony default export */ const date_fns_format = ((/* unused pure expression or super */ null && (format)));\n\n;// ./src/script/task.js\n\n\nclass Task {\n  constructor(icon, name, description, time, date) {\n    let status = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : taskConst.STATUS.INCOMPLETE;\n    let priority = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : taskConst.PRIORITY.LOW;\n    this.icon = icon;\n    this.name = name;\n    this.description = description;\n    this._time = time;\n    this._date = date;\n    this._status = status;\n    this._priority = priority;\n  }\n  get time() {\n    return this._time;\n  }\n  get date() {\n    return this._date;\n  }\n  get status() {\n    return this._status;\n  }\n  get priority() {\n    return this._priority;\n  }\n  set date(date) {\n    this._date = date;\n  } //Will add validation later on\n\n  set time(time) {\n    try {\n      const parsedTime = parse(time, "HH:mm", new Date());\n      this._time = format(parsedTime, "ha").toLowerCase();\n    } catch {\n      this._time = "";\n    }\n  }\n  set status(newStatus) {\n    const STATUSES = Object.values(taskConst.STATUS);\n    if (!STATUSES.includes(newStatus)) {\n      console.log("Please pick an appropriate status.");\n      return;\n    }\n    this._status = newStatus;\n  }\n  set priority(newPriority) {\n    const TASK_PRIORITIES = Object.values(taskConst.PRIORITY);\n    if (!TASK_PRIORITIES.includes(newPriority)) {\n      console.log("Please pick an appropriate priority.");\n      return;\n    }\n    this._priority = newPriority;\n  }\n  toggleStatus() {\n    if (this.status === taskConst.STATUS.INCOMPLETE) {\n      this.status = taskConst.STATUS.COMPLETE;\n    } else if (this.status === taskConst.STATUS.COMPLETE) {\n      this.status = taskConst.STATUS.INCOMPLETE;\n    }\n  }\n  togglePriority() {\n    const priorities = Object.values(taskConst.PRIORITY);\n    let currentIndex = priorities.indexOf(this.priority);\n    this.priority = priorities[(currentIndex + 1) % priorities.length];\n  }\n}\n\n;// ./src/script/data.js\n\n// TODO: Make this file JSON\nconst todos = [{\n  icon: "home",\n  name: "Home",\n  tasks: [{\n    icon: "alarm",\n    name: "Wake Up Early",\n    description: "Wake Up Before 9AM and Clean Your Desk",\n    time: "08am",\n    date: undefined,\n    status: taskConst.STATUS.COMPLETE,\n    priority: taskConst.PRIORITY.HIGH\n  }, {\n    icon: "local_cafe",\n    name: "Brewing Coffee",\n    description: "Dispersing Morning Brain Fog",\n    time: "09am",\n    date: undefined,\n    status: taskConst.STATUS.INCOMPLETE,\n    priority: taskConst.PRIORITY.HIGH\n  }, {\n    icon: "calculate",\n    name: "Doing Leetcode",\n    description: "Study Data Structures and Algorithms",\n    time: "10am",\n    date: undefined,\n    status: taskConst.STATUS.INCOMPLETE,\n    priority: taskConst.PRIORITY.LOW\n  }, {\n    icon: "code",\n    name: "Coding Todo App",\n    description: "Code Vanilla JS Todo App",\n    time: "12pm",\n    date: null,\n    status: taskConst.STATUS.INCOMPLETE,\n    priority: taskConst.PRIORITY.EXTREME\n  }]\n}, {\n  icon: "mail",\n  name: "Mails",\n  tasks: [{\n    icon: "check",\n    name: "Check Emails",\n    description: "Any Return From Job Applications?",\n    time: "09am",\n    date: undefined,\n    status: taskConst.STATUS.INCOMPLETE,\n    priority: taskConst.PRIORITY.MEDIUM\n  }, {\n    icon: "check",\n    name: "Reach Out to Recruiters",\n    description: "Never Know Who Will Answer Back",\n    time: "10am",\n    date: undefined,\n    status: taskConst.STATUS.COMPLETE,\n    priority: taskConst.PRIORITY.LOW\n  }]\n}, {\n  icon: "group",\n  name: "Meeting",\n  tasks: [{\n    icon: "local_cafe",\n    name: "Catch Up With Friends",\n    description: "It\'s Been a While, They Forgot Me!",\n    time: "",\n    date: undefined,\n    status: taskConst.STATUS.INCOMPLETE,\n    priority: taskConst.PRIORITY.LOW\n  }]\n}, {\n  icon: "volunteer_activism",\n  name: "Oni",\n  tasks: [{\n    icon: "alarm",\n    name: "Get a Job",\n    description: "Find a Remote Programming Job",\n    time: "",\n    date: undefined,\n    status: taskConst.STATUS.INCOMPLETE,\n    priority: taskConst.PRIORITY.EXTREME\n  }, {\n    icon: "favorite",\n    name: "Marry Snomoni",\n    description: "A Smile Worth Thousand Bouquets",\n    time: "",\n    date: undefined,\n    status: taskConst.STATUS.INCOMPLETE,\n    priority: taskConst.PRIORITY.EXTREME\n  }, {\n    icon: "star",\n    name: "Decide on Marriage",\n    description: "It Only Took Four Years Love",\n    time: "",\n    date: undefined,\n    status: taskConst.STATUS.COMPLETE,\n    priority: taskConst.PRIORITY.EXTREME\n  }, {\n    icon: "delete",\n    name: "Send Dad Away",\n    description: "She Would be All Over Him...",\n    time: "",\n    date: undefined,\n    status: taskConst.STATUS.COMPLETE,\n    priority: taskConst.PRIORITY.LOW\n  }]\n}];\n\n;// ./src/script/helper.js\n\n\n\n\n// "gen" means generated\nfunction generateExampleTodos() {\n  let exampleTodos = [];\n  if (!todos) {\n    console.log("No example todo\'s were found.");\n    return [];\n  }\n  for (let todo of todos) {\n    const newTodo = new Todo(todo.icon, todo.name);\n    for (let task of todo.tasks) {\n      const newTask = new Task(...Object.values(task));\n      newTodo.addTask(newTask);\n    }\n    exampleTodos.push(newTodo);\n  }\n  return exampleTodos;\n}\n\n// FIXME: this function is a bandaid, event listeners shouldnt be added twice anyways\nfunction clearEventListeners(node) {\n  const newNode = node.cloneNode(true);\n  node.replaceWith(newNode);\n  return newNode;\n}\nfunction capitalizeFirstLetter(val) {\n  return String(val).charAt(0).toUpperCase() + String(val).slice(1);\n}\n\n;// ./src/script/todoController.js\n\nclass TodoController {\n  static #instance = null;\n  constructor() {\n    if (TodoController.#instance) {\n      return TodoController.#instance;\n    }\n    this._todos = []; // local storage check\n    this._currentTodo;\n    this._currentTodoIndex;\n    TodoController.#instance = this;\n  }\n  initialize() {\n    // checkLocalStorage for todos\n    let localStorage = false;\n    if (!localStorage) {\n      this._todos = generateExampleTodos();\n      this.currentTodoIndex = 0;\n    }\n  }\n  get todos() {\n    return this._todos;\n  }\n  get currentTodo() {\n    const app = document.getElementById("app");\n    this.currentTodoIndex = app.dataset.todoIndex;\n    // app.setAttribute("data-todo-index", todoIndex)\n    this._currentTodo = this.todos[this.currentTodoIndex];\n    return this._currentTodo;\n  }\n  get currentTodoIndex() {\n    return this._currentTodoIndex;\n  }\n  set currentTodoIndex(index) {\n    const app = document.getElementById("app");\n    app.setAttribute("data-todo-index", index);\n    this._currentTodoIndex = index;\n  }\n  addTodo(todo) {\n    this._todos.push(todo);\n  }\n  deleteTodo(index) {\n    if (index > -1 && index < this._tasks.length) {\n      this._todos.splice(index, 1);\n    }\n  }\n}\n\n;// ./src/script/displayController.js\n\n\n\nclass DisplayController {\n  static #instance = null;\n  constructor(todoController) {\n    if (DisplayController.#instance) {\n      return DisplayController.#instance;\n    }\n    this.todoController = todoController;\n    DisplayController.#instance = this;\n    this.renderBody();\n    this.renderSidebar();\n    this.renderIconSelect();\n  }\n  renderTodo() {\n    this.renderNav();\n    this.renderBody();\n    this.renderFooter();\n  }\n  renderNav() {\n    const currentTodo = this.todoController.currentTodo;\n    const TITLE = currentTodo.name;\n    const ACTIVE_TASK_COUNT = currentTodo.getTaskCount("status", taskConst.STATUS.INCOMPLETE);\n    const COMPLETE_TASK_COUNT = currentTodo.getTaskCount("status", taskConst.STATUS.COMPLETE);\n    const TOTAL_TASK_COUNT = ACTIVE_TASK_COUNT + COMPLETE_TASK_COUNT;\n    let completionPercentageText;\n    if (TOTAL_TASK_COUNT > 0) {\n      let completionPercentage = Math.round(COMPLETE_TASK_COUNT / TOTAL_TASK_COUNT * 100);\n      completionPercentageText = completionPercentage + "% done";\n    } else {\n      // Maybe change this to "Get started" and on click add new Dialog box opens\n      completionPercentageText = "No tasks yet";\n    }\n    const today = format(new Date(), "MMM d, yyyy");\n    const navHtml = `\n            <div id="leftHeader">\n                <div id="todoHeader">\n                    <h1 class="montserrat">${TITLE}</h1>\n                </div>\n                <div id="currentDate" class="open-sans">\n                ${today}\n                </div>\n            </div>\n\n            <div id="rightHeader">\n                <div class="flex-1"></div>\n                <div id="todoTaskStatuses" class="flex-1">\n                    <div id="completedTasks" class="flex-1">\n                        <div class="number montserrat">${ACTIVE_TASK_COUNT}</div>\n                        <div class="open-sans gray">Active</div>\n                    </div>\n                    <div id="incompleteTasks" class="flex-1">\n                        <div class="number montserrat">${COMPLETE_TASK_COUNT}</div>\n                        <div class="open-sans gray">Done</div>\n                    </div>\n                </div>\n                <div id="completionPercentage"class="flex-1">\n                    <p class="gray">${completionPercentageText}</p>\n                </div>\n            </div>\n        `;\n    let nav = document.querySelector("nav");\n    nav.innerHTML = "";\n    nav.innerHTML = navHtml;\n  }\n  renderBody() {\n    this.renderTasks(taskConst.STATUS.COMPLETE);\n    this.renderTasks(taskConst.STATUS.INCOMPLETE);\n  }\n  renderFooter() {\n    let countSpan = document.querySelector("#completedTaskCount span");\n    const COMPLETE_TASK_COUNT = this.todoController.currentTodo.getTaskCount("status", taskConst.STATUS.COMPLETE);\n    countSpan.textContent = COMPLETE_TASK_COUNT;\n  }\n  generateTask(index, task, statusValue) {\n    if (!(task.status === statusValue)) {\n      return "";\n    }\n    const taskIndex = index;\n    const taskIcon = task.icon;\n    const taskTitle = task.name;\n    const taskDescription = task.description;\n    const taskTime = task.time;\n    const taskPriority = task.priority;\n    function isTaskComplete() {\n      return statusValue === taskConst.STATUS.COMPLETE;\n    }\n    const taskHtml = `\n                <div class="task${isTaskComplete() ? " task-complete" : ""}" data-task-index="${taskIndex}">\n                    <div class="flex">\n                        <div id="taskIcon">\n                            <span class="material-symbols-sharp blue-icon">\n                                ${taskIcon}\n                            </span>\n                        </div>\n                        <div id="taskText">\n                            <div id="taskHeader" class="dark-slate montserrat">${taskTitle}</div>\n                            <div id="taskDescription" class="dark-gray open-sans">${taskDescription}</div>\n                        </div>\n                    </div>\n                    <div>\n                        <div  class="dark-gray montserrat priority">${this.genPriorityIcon(taskPriority)}</div>\n                        <div id="taskTime" class="dark-gray montserrat">${taskTime}</div>\n                    </div>\n                    <button data-task-index="${taskIndex}" class="btn-floating green hover-button complete-task">\n                        <span class="material-symbols-sharp">\n                                ${isTaskComplete() ? "undo" : "check"}\n                            </span>\n                    </button>\n                    <button data-task-index="${taskIndex}" class="btn-floating red hover-button delete-task">\n                        <span class="material-symbols-sharp">\n                               delete\n                            </span>\n                    </button>\n                </div>\n                <hr>\n        `;\n    return taskHtml;\n  }\n  renderTasks(status) {\n    let todo = this.todoController.currentTodo;\n    const taskCount = todo.getTaskCount("status", status);\n    let taskList;\n    if (status === taskConst.STATUS.INCOMPLETE) {\n      taskList = document.querySelector("#taskList");\n      if (taskCount === 0) {\n        taskList.innerHTML = `<p class="open-sans default-text dark-gray">No Active Tasks</p>`;\n        return;\n      }\n    } else if (status === taskConst.STATUS.COMPLETE) {\n      taskList = document.querySelector("#completedTaskList");\n      if (taskCount === 0) {\n        taskList.innerHTML = `<p class="open-sans default-text dark-gray">No Completed Tasks</p>`;\n        return;\n      }\n    }\n    taskList.innerHTML = "";\n    let taskIndex = 0;\n    for (let task of todo.tasks) {\n      const taskHtml = this.generateTask(taskIndex, task, status);\n      taskList.innerHTML += taskHtml;\n      taskIndex++;\n    }\n  }\n  renderSidebar() {\n    this.renderSidebarNav();\n    this.renderSidebarTodos();\n  }\n  generateTodo(index, todo) {\n    const todoIndex = index;\n    const todoIcon = todo.icon;\n    const todoName = todo.name;\n    const todoHtml = ` \n            <div class="todo" data-todo-index="${todoIndex}">\n                <span class="material-symbols-sharp"> ${todoIcon}</span>\n                <h3>${todoName}</h3>\n            </div>\n        `;\n    return todoHtml;\n  }\n  renderSidebarNav() {\n    const todoCount = this.todoController.todos.length;\n    const countContainer = document.querySelector(".todo-count");\n    countContainer.textContent = `\n        (${todoCount} / 10)\n        `;\n  }\n  renderSidebarTodos() {\n    const todoList = document.querySelector("#todoList");\n    todoList.innerHTML = "";\n    let todoIndex = 0;\n    for (let todo of this.todoController.todos) {\n      const todoHtml = this.generateTodo(todoIndex, todo);\n      todoList.innerHTML += todoHtml;\n      todoIndex++;\n    }\n  }\n  genPriorityIcon(priority) {\n    let icon;\n    let color;\n    switch (priority) {\n      case taskConst.PRIORITY.LOW:\n        icon = "signal_cellular_alt_1_bar";\n        color = "light-blue";\n        break;\n      case taskConst.PRIORITY.MEDIUM:\n        icon = "signal_cellular_alt_2_bar";\n        color = "blue";\n        break;\n      case taskConst.PRIORITY.HIGH:\n        icon = "signal_cellular_alt";\n        color = "orange";\n        break;\n      case taskConst.PRIORITY.EXTREME:\n        icon = "signal_cellular_connected_no_internet_4_bar";\n        color = "red";\n        break;\n      default:\n        throw new Error("Priority icon not found");\n    }\n    const iconHtml = `\n        <div class="tooltip"><span class="material-symbols-sharp ${color}-icon">${icon}</span>\n           <span class="tooltiptext capitalize">${capitalizeFirstLetter(priority) + " Priority"}</span></div>\n        `;\n    return iconHtml;\n  }\n  renderIconSelect() {\n    let div = document.getElementById("iconSelection");\n    for (let icon of MATERIAL_ICONS) {\n      const iconHtml = `<div class="task-icon">\n                                <span class="material-symbols-sharp blue-icon icon-selection">${icon}</span>\n                            </div>`;\n      div.innerHTML += iconHtml;\n    }\n  }\n}\n\n;// ./src/script/eventController.js\n\n\n\nclass EventController {\n  static #instance = null;\n  constructor(todoController, displayController) {\n    if (EventController.#instance) {\n      return EventController.#instance;\n    }\n    this._todoController = todoController;\n    this._displayController = displayController;\n    this.iconDialog = document.querySelector("#iconDialog");\n    this.addTaskDialog = document.querySelector("#addTaskDialog");\n    this.addTaskForm = document.querySelector("#addTaskForm");\n    this.addTodoDialog = document.querySelector("#addTodoDialog");\n    this.addTodoForm = document.querySelector("#addTodoForm");\n    EventController.#instance = this;\n    this.initializeEventListeners();\n  }\n  static get instance() {\n    return this.#instance;\n  }\n  get todoController() {\n    return this._todoController;\n  }\n  get displayController() {\n    return this._displayController;\n  }\n  initializeEventListeners() {\n    this.setSidebarTodos();\n    this.setToggleTaskStatus();\n    this.setCompletedTasks();\n    this.setAddTaskDialog();\n    this.setAddTodoDialog();\n    this.setIconListToggle();\n    this.iconDialog.addEventListener("click", e => this.selectIcon(e));\n    this.handleOutsideClick();\n  }\n  setAddTaskDialog() {\n    document.querySelector("#addTaskDialog .dialog-header>button").addEventListener("click", () => {\n      this.addTaskDialog.close();\n    });\n    document.querySelector("#closeAddTaskDialog").addEventListener("click", () => this.addTaskDialog.close());\n    document.querySelector("#showAddTaskDialog").addEventListener("click", () => {\n      this.addTaskDialog.showModal();\n    });\n    this.addTaskForm.addEventListener("submit", e => {\n      e.preventDefault();\n      const formData = this.sendTaskForm();\n      const newTask = this.createFromForm(formData, "task");\n      const currentTodo = this.todoController.currentTodo;\n      currentTodo.tasks = [...currentTodo.tasks, newTask];\n      this.displayController.renderTodo(); //render\n      this.setToggleTaskStatus(); //re-attach event listeners\n\n      this.addTaskForm.reset();\n      this.addTaskDialog.close();\n    });\n  }\n  setAddTodoDialog() {\n    document.querySelector("#addTodoDialog .dialog-header>button").addEventListener("click", () => {\n      this.addTodoDialog.close();\n    });\n    document.querySelector("#closeAddTodoDialog").addEventListener("click", () => this.addTodoDialog.close());\n    document.querySelector("#showAddTodoDialog").addEventListener("click", () => {\n      this.addTodoDialog.showModal();\n    });\n    this.addTodoForm.addEventListener("submit", e => {\n      e.preventDefault();\n      const formData = this.sendTodoForm();\n      const newTodo = this.createFromForm(formData, "todo");\n      let todoList = this._todoController.todos;\n      if (todoList.length >= 10) {\n        alert("Max of 10 Todos can be added.");\n        this.addTodoForm.reset();\n        this.addTodoDialog.close();\n        return;\n      }\n      todoList.push(newTodo);\n      this.displayController.renderSidebar();\n      this.displayController.setRenderSidebarTodos();\n      this.addTodoForm.reset();\n      this.addTodoDialog.close();\n    });\n  }\n  setToggleTaskStatus() {\n    const completeButtons = document.querySelectorAll("button.complete-task");\n    completeButtons.forEach(button => {\n      const newBtn = clearEventListeners(button);\n      newBtn.addEventListener("click", () => {\n        const currentTodo = this.todoController.currentTodo;\n        const taskIndex = button.dataset.taskIndex;\n        const currentTask = currentTodo.tasks[taskIndex];\n        currentTask.toggleStatus();\n        this.displayController.renderTodo(); //render\n        this.setToggleTaskStatus(); //reattach eventListeners\n      });\n    });\n  }\n  toggleIconList() {\n    let iconDialog = document.querySelector("#iconDialog");\n    if (iconDialog.open) {\n      iconDialog.close();\n    } else {\n      iconDialog.showModal();\n    }\n  }\n  selectIcon(event) {\n    if (event.target.tagName === "SPAN") {\n      let icon = this.getFormIcon();\n      icon.textContent = event.target.textContent;\n      icon.classList.add("selected");\n      this.iconDialog.close();\n    }\n  }\n  getFormIcon() {\n    let icon;\n    if (this.addTaskDialog.open) {\n      icon = document.querySelector("#showTaskIconList");\n    } else if (this.addTodoDialog.open) {\n      icon = document.querySelector("#showTodoIconList");\n    }\n    return icon;\n  }\n  sendTaskForm() {\n    const formData = new FormData(this.addTaskForm);\n    return formData;\n  }\n  sendTodoForm() {\n    const formData = new FormData(this.addTodoForm);\n    return formData;\n  }\n  createFromForm(formData) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "task";\n    if (!formData) {\n      throw new Error("Form data is corrupted");\n    }\n    let element;\n    let icon;\n    if (type === "task") {\n      element = new Task();\n      icon = document.querySelector("#showTaskIconList").textContent;\n    } else if (type === "todo") {\n      icon = document.querySelector("#showTodoIconList").textContent;\n      element = new Todo();\n    }\n    formData.append("icon", icon);\n    for (let [key, value] of formData.entries()) {\n      element[key] = value;\n    }\n    return element;\n  }\n  setIconListToggle() {\n    document.querySelector("#showTaskIconList").addEventListener("click", () => this.toggleIconList());\n    document.querySelector("#showTodoIconList").addEventListener("click", () => this.toggleIconList());\n  }\n  setCompletedTasks() {\n    const showCompletedBtn = document.querySelector("#showCompletedTasks");\n    const completedTaskCount = document.querySelector("#completedTaskCount");\n    const completedTasksContainer = document.querySelector("#completedTasksContainer");\n    const completedTaskList = document.querySelector("#completedTaskList");\n    if (!showCompletedBtn || !completedTasksContainer || !completedTaskList) {\n      throw new Error("setCompletedTasks didnt work");\n    }\n\n    // Prevent event handler being added twice, replace with fresh btn\n    const showCompletedTasks = document.querySelector("#showCompletedTasks");\n    const newBtn = clearEventListeners(showCompletedTasks);\n    const newCompletedTaskCount = clearEventListeners(completedTaskCount);\n    [newBtn, newCompletedTaskCount].forEach(node => {\n      node.addEventListener("click", () => {\n        const icon = document.querySelector("span.north");\n        completedTasksContainer.classList.toggle("slide-up");\n        completedTaskList.classList.toggle("hidden");\n        icon.classList.toggle("rotated");\n      });\n    });\n  }\n  setSidebarTodos() {\n    const app = document.querySelector("#app");\n    const todos = document.querySelectorAll(".todo");\n    todos.forEach(todoNode => {\n      const todo = clearEventListeners(todoNode);\n      todo.addEventListener("click", () => {\n        const todoIndex = todo.dataset.todoIndex;\n        app.dataset.todoIndex = todoIndex;\n        this.toggleSidebar();\n        this.displayController.renderTodo();\n        this.setToggleTaskStatus();\n      });\n    });\n  }\n  handleOutsideClick() {\n    //dialogs\n    document.querySelectorAll("dialog").forEach(dialog => {\n      dialog.addEventListener("click", event => {\n        if (event.target === dialog) {\n          dialog.close();\n        }\n      });\n    });\n\n    //trying to make sidebar close when open and outside is clicked\n\n    // const app = document.querySelector("#app");\n    // app.addEventListener("click", (event) => {\n    //     const sidebar = document.querySelector("aside");\n\n    //     if (!sidebar.contains(event.target)) {\n    //         console.log("Clicked outside the sidebar!");\n    //         this.toggleSidebar("close");\n    //     }\n    // });\n  }\n  toggleSidebar() {\n    let sidebar = document.querySelector(".sidebar");\n    let hambButton = document.querySelector(".hamb");\n    let svg = document.querySelector(".hamb > svg.ham");\n\n    // const isClosed =\n    //     type === "close" ||\n    //     (type !== "open" && sidebar.classList.contains("is-closed"));\n\n    // sidebar.classList.toggle("is-closed", isClosed);\n    // hambButton.classList.toggle("active", !isClosed);\n    // svg.classList.toggle("black", !isClosed);\n\n    sidebar.classList.toggle("is-closed");\n    hambButton.classList.toggle("active");\n    svg.classList.toggle("black");\n  }\n}\n\n;// ./src/script/index.js\n\n\n\n\nconst todoController = new TodoController();\ntodoController.initialize();\nconst displayController = new DisplayController(todoController);\ndisplayController.renderTodo();\nnew EventController(todoController, displayController);\n\n// make hamburger button active\n//\n//\nconst script_button = document.querySelector(".hamb");\nscript_button.addEventListener("click", () => {\n  script_button.classList.toggle("active");\n});\nconst toggleBtn = document.querySelector(".hamb");\nconst svg = document.querySelector(".hamb > svg.ham");\nconst sidebar = document.querySelector(".sidebar");\ntoggleBtn.addEventListener("click", function () {\n  sidebar.classList.toggle("is-closed");\n  svg.classList.toggle("black");\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///654\n')},659:module=>{eval('\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjUtdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///659\n')},666:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.tooltip {\r\n    position: relative;\r\n    display: inline-block;\r\n}\r\n\r\n/* Tooltip text */\r\n.tooltip .tooltiptext {\r\n    font-size: 16px;\r\n    visibility: hidden;\r\n    min-width: max-content;\r\n    background-color: #2db7e5;\r\n    color: #fff;\r\n    text-align: center;\r\n    padding: 4px;\r\n    border-radius: 6px;\r\n\r\n    position: absolute;\r\n    right: 10px;\r\n    bottom: -25px;\r\n    z-index: 1;\r\n}\r\n\r\n.tooltip:hover .tooltiptext {\r\n    visibility: visible;\r\n}\r\n`, "",{"version":3,"sources":["webpack://./src/css/tooltip.css"],"names":[],"mappings":"AAAA;IACI,kBAAkB;IAClB,qBAAqB;AACzB;;AAEA,iBAAiB;AACjB;IACI,eAAe;IACf,kBAAkB;IAClB,sBAAsB;IACtB,yBAAyB;IACzB,WAAW;IACX,kBAAkB;IAClB,YAAY;IACZ,kBAAkB;;IAElB,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,UAAU;AACd;;AAEA;IACI,mBAAmB;AACvB","sourcesContent":[".tooltip {\\r\\n    position: relative;\\r\\n    display: inline-block;\\r\\n}\\r\\n\\r\\n/* Tooltip text */\\r\\n.tooltip .tooltiptext {\\r\\n    font-size: 16px;\\r\\n    visibility: hidden;\\r\\n    min-width: max-content;\\r\\n    background-color: #2db7e5;\\r\\n    color: #fff;\\r\\n    text-align: center;\\r\\n    padding: 4px;\\r\\n    border-radius: 6px;\\r\\n\\r\\n    position: absolute;\\r\\n    right: 10px;\\r\\n    bottom: -25px;\\r\\n    z-index: 1;\\r\\n}\\r\\n\\r\\n.tooltip:hover .tooltiptext {\\r\\n    visibility: visible;\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjY2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUM2RztBQUNqQjtBQUM1Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHNGQUFzRixZQUFZLGFBQWEsT0FBTyxZQUFZLE1BQU0sVUFBVSxZQUFZLGFBQWEsYUFBYSxXQUFXLFlBQVksV0FBVyxhQUFhLGFBQWEsV0FBVyxVQUFVLFVBQVUsTUFBTSxLQUFLLFlBQVksb0NBQW9DLDJCQUEyQiw4QkFBOEIsS0FBSyxxREFBcUQsd0JBQXdCLDJCQUEyQiwrQkFBK0Isa0NBQWtDLG9CQUFvQiwyQkFBMkIscUJBQXFCLDJCQUEyQiwrQkFBK0Isb0JBQW9CLHNCQUFzQixtQkFBbUIsS0FBSyxxQ0FBcUMsNEJBQTRCLEtBQUssdUJBQXVCO0FBQ3oxQjtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNS10b2RvLy4vc3JjL2Nzcy90b29sdGlwLmNzcz83MjliIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAudG9vbHRpcCB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbn1cclxuXHJcbi8qIFRvb2x0aXAgdGV4dCAqL1xyXG4udG9vbHRpcCAudG9vbHRpcHRleHQge1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgbWluLXdpZHRoOiBtYXgtY29udGVudDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyZGI3ZTU7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDRweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDZweDtcclxuXHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICByaWdodDogMTBweDtcclxuICAgIGJvdHRvbTogLTI1cHg7XHJcbiAgICB6LWluZGV4OiAxO1xyXG59XHJcblxyXG4udG9vbHRpcDpob3ZlciAudG9vbHRpcHRleHQge1xyXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcclxufVxyXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvdG9vbHRpcC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxrQkFBa0I7SUFDbEIscUJBQXFCO0FBQ3pCOztBQUVBLGlCQUFpQjtBQUNqQjtJQUNJLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLHlCQUF5QjtJQUN6QixXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixrQkFBa0I7O0lBRWxCLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsYUFBYTtJQUNiLFVBQVU7QUFDZDs7QUFFQTtJQUNJLG1CQUFtQjtBQUN2QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIudG9vbHRpcCB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBUb29sdGlwIHRleHQgKi9cXHJcXG4udG9vbHRpcCAudG9vbHRpcHRleHQge1xcclxcbiAgICBmb250LXNpemU6IDE2cHg7XFxyXFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXHJcXG4gICAgbWluLXdpZHRoOiBtYXgtY29udGVudDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJkYjdlNTtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgcGFkZGluZzogNHB4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XFxyXFxuXFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgcmlnaHQ6IDEwcHg7XFxyXFxuICAgIGJvdHRvbTogLTI1cHg7XFxyXFxuICAgIHotaW5kZXg6IDE7XFxyXFxufVxcclxcblxcclxcbi50b29sdGlwOmhvdmVyIC50b29sdGlwdGV4dCB7XFxyXFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///666\n')},790:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* Box sizing rules */\r\n*,\r\n*::before,\r\n*::after {\r\n    box-sizing: border-box;\r\n}\r\n\r\n/* Prevent font size inflation */\r\nhtml {\r\n    -moz-text-size-adjust: none;\r\n    -webkit-text-size-adjust: none;\r\n    text-size-adjust: none;\r\n}\r\n\r\n/* Remove default margin in favour of better control in authored CSS */\r\nbody,\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\np,\r\nfigure,\r\nblockquote,\r\ndl,\r\ndd {\r\n    margin-block-end: 0;\r\n}\r\n\r\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\r\nul[role="list"],\r\nol[role="list"] {\r\n    list-style: none;\r\n}\r\n\r\n/* Set core body defaults */\r\nbody {\r\n    min-height: 100vh;\r\n    line-height: 1.5;\r\n}\r\n\r\n/* Set shorter line heights on headings and interactive elements */\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nbutton,\r\ninput,\r\nlabel {\r\n    line-height: 1.1;\r\n}\r\n\r\n/* Balance text wrapping on headings */\r\nh1,\r\nh2,\r\nh3,\r\nh4 {\r\n    text-wrap: balance;\r\n}\r\n\r\n/* A elements that don\'t have a class get default styles */\r\na:not([class]) {\r\n    text-decoration-skip-ink: auto;\r\n    color: currentColor;\r\n}\r\n\r\n/* Make images easier to work with */\r\nimg,\r\npicture {\r\n    max-width: 100%;\r\n    display: block;\r\n}\r\n\r\n/* Inherit fonts for inputs and buttons */\r\ninput,\r\nbutton,\r\ntextarea,\r\nselect {\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n}\r\n\r\n/* Make sure textareas without a rows attribute are not tiny */\r\ntextarea:not([rows]) {\r\n    min-height: 6em;\r\n}\r\n\r\n/* Anything that has been anchored to should have extra scroll margin */\r\n:target {\r\n    scroll-margin-block: 5ex;\r\n}\r\n`, "",{"version":3,"sources":["webpack://./src/css/reset.css"],"names":[],"mappings":"AAAA,qBAAqB;AACrB;;;IAGI,sBAAsB;AAC1B;;AAEA,gCAAgC;AAChC;IACI,2BAA2B;IAC3B,8BAA8B;IAC9B,sBAAsB;AAC1B;;AAEA,sEAAsE;AACtE;;;;;;;;;;IAUI,mBAAmB;AACvB;;AAEA,2GAA2G;AAC3G;;IAEI,gBAAgB;AACpB;;AAEA,2BAA2B;AAC3B;IACI,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA,kEAAkE;AAClE;;;;;;;IAOI,gBAAgB;AACpB;;AAEA,sCAAsC;AACtC;;;;IAII,kBAAkB;AACtB;;AAEA,0DAA0D;AAC1D;IACI,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA,oCAAoC;AACpC;;IAEI,eAAe;IACf,cAAc;AAClB;;AAEA,yCAAyC;AACzC;;;;IAII,oBAAoB;IACpB,kBAAkB;AACtB;;AAEA,8DAA8D;AAC9D;IACI,eAAe;AACnB;;AAEA,uEAAuE;AACvE;IACI,wBAAwB;AAC5B","sourcesContent":["/* Box sizing rules */\\r\\n*,\\r\\n*::before,\\r\\n*::after {\\r\\n    box-sizing: border-box;\\r\\n}\\r\\n\\r\\n/* Prevent font size inflation */\\r\\nhtml {\\r\\n    -moz-text-size-adjust: none;\\r\\n    -webkit-text-size-adjust: none;\\r\\n    text-size-adjust: none;\\r\\n}\\r\\n\\r\\n/* Remove default margin in favour of better control in authored CSS */\\r\\nbody,\\r\\nh1,\\r\\nh2,\\r\\nh3,\\r\\nh4,\\r\\np,\\r\\nfigure,\\r\\nblockquote,\\r\\ndl,\\r\\ndd {\\r\\n    margin-block-end: 0;\\r\\n}\\r\\n\\r\\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\\r\\nul[role=\\"list\\"],\\r\\nol[role=\\"list\\"] {\\r\\n    list-style: none;\\r\\n}\\r\\n\\r\\n/* Set core body defaults */\\r\\nbody {\\r\\n    min-height: 100vh;\\r\\n    line-height: 1.5;\\r\\n}\\r\\n\\r\\n/* Set shorter line heights on headings and interactive elements */\\r\\nh1,\\r\\nh2,\\r\\nh3,\\r\\nh4,\\r\\nbutton,\\r\\ninput,\\r\\nlabel {\\r\\n    line-height: 1.1;\\r\\n}\\r\\n\\r\\n/* Balance text wrapping on headings */\\r\\nh1,\\r\\nh2,\\r\\nh3,\\r\\nh4 {\\r\\n    text-wrap: balance;\\r\\n}\\r\\n\\r\\n/* A elements that don\'t have a class get default styles */\\r\\na:not([class]) {\\r\\n    text-decoration-skip-ink: auto;\\r\\n    color: currentColor;\\r\\n}\\r\\n\\r\\n/* Make images easier to work with */\\r\\nimg,\\r\\npicture {\\r\\n    max-width: 100%;\\r\\n    display: block;\\r\\n}\\r\\n\\r\\n/* Inherit fonts for inputs and buttons */\\r\\ninput,\\r\\nbutton,\\r\\ntextarea,\\r\\nselect {\\r\\n    font-family: inherit;\\r\\n    font-size: inherit;\\r\\n}\\r\\n\\r\\n/* Make sure textareas without a rows attribute are not tiny */\\r\\ntextarea:not([rows]) {\\r\\n    min-height: 6em;\\r\\n}\\r\\n\\r\\n/* Anything that has been anchored to should have extra scroll margin */\\r\\n:target {\\r\\n    scroll-margin-block: 5ex;\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUM2RztBQUNqQjtBQUM1Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTywyRkFBMkYsUUFBUSxZQUFZLE9BQU8sWUFBWSxNQUFNLFlBQVksYUFBYSxhQUFhLE9BQU8sWUFBWSxlQUFlLFlBQVksT0FBTyxZQUFZLE9BQU8sWUFBWSxPQUFPLFlBQVksTUFBTSxZQUFZLGFBQWEsT0FBTyxZQUFZLFlBQVksWUFBWSxPQUFPLFlBQVksU0FBUyxZQUFZLE9BQU8sWUFBWSxNQUFNLFlBQVksYUFBYSxPQUFPLFlBQVksT0FBTyxVQUFVLFVBQVUsT0FBTyxZQUFZLFNBQVMsWUFBWSxhQUFhLE9BQU8sWUFBWSxNQUFNLFVBQVUsT0FBTyxZQUFZLE1BQU0sWUFBWSxrRkFBa0YsK0JBQStCLEtBQUssbURBQW1ELG9DQUFvQyx1Q0FBdUMsK0JBQStCLEtBQUssbUtBQW1LLDRCQUE0QixLQUFLLGlLQUFpSyx5QkFBeUIsS0FBSyw4Q0FBOEMsMEJBQTBCLHlCQUF5QixLQUFLLHVJQUF1SSx5QkFBeUIsS0FBSyw0RUFBNEUsMkJBQTJCLEtBQUssdUZBQXVGLHVDQUF1Qyw0QkFBNEIsS0FBSyxrRUFBa0Usd0JBQXdCLHVCQUF1QixLQUFLLGdHQUFnRyw2QkFBNkIsMkJBQTJCLEtBQUssaUdBQWlHLHdCQUF3QixLQUFLLDZGQUE2RixpQ0FBaUMsS0FBSyx1QkFBdUI7QUFDdjBFO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI1LXRvZG8vLi9zcmMvY3NzL3Jlc2V0LmNzcz9iMjQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAvKiBCb3ggc2l6aW5nIHJ1bGVzICovXHJcbiosXHJcbio6OmJlZm9yZSxcclxuKjo6YWZ0ZXIge1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxufVxyXG5cclxuLyogUHJldmVudCBmb250IHNpemUgaW5mbGF0aW9uICovXHJcbmh0bWwge1xyXG4gICAgLW1vei10ZXh0LXNpemUtYWRqdXN0OiBub25lO1xyXG4gICAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiBub25lO1xyXG4gICAgdGV4dC1zaXplLWFkanVzdDogbm9uZTtcclxufVxyXG5cclxuLyogUmVtb3ZlIGRlZmF1bHQgbWFyZ2luIGluIGZhdm91ciBvZiBiZXR0ZXIgY29udHJvbCBpbiBhdXRob3JlZCBDU1MgKi9cclxuYm9keSxcclxuaDEsXHJcbmgyLFxyXG5oMyxcclxuaDQsXHJcbnAsXHJcbmZpZ3VyZSxcclxuYmxvY2txdW90ZSxcclxuZGwsXHJcbmRkIHtcclxuICAgIG1hcmdpbi1ibG9jay1lbmQ6IDA7XHJcbn1cclxuXHJcbi8qIFJlbW92ZSBsaXN0IHN0eWxlcyBvbiB1bCwgb2wgZWxlbWVudHMgd2l0aCBhIGxpc3Qgcm9sZSwgd2hpY2ggc3VnZ2VzdHMgZGVmYXVsdCBzdHlsaW5nIHdpbGwgYmUgcmVtb3ZlZCAqL1xyXG51bFtyb2xlPVwibGlzdFwiXSxcclxub2xbcm9sZT1cImxpc3RcIl0ge1xyXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcclxufVxyXG5cclxuLyogU2V0IGNvcmUgYm9keSBkZWZhdWx0cyAqL1xyXG5ib2R5IHtcclxuICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xyXG4gICAgbGluZS1oZWlnaHQ6IDEuNTtcclxufVxyXG5cclxuLyogU2V0IHNob3J0ZXIgbGluZSBoZWlnaHRzIG9uIGhlYWRpbmdzIGFuZCBpbnRlcmFjdGl2ZSBlbGVtZW50cyAqL1xyXG5oMSxcclxuaDIsXHJcbmgzLFxyXG5oNCxcclxuYnV0dG9uLFxyXG5pbnB1dCxcclxubGFiZWwge1xyXG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcclxufVxyXG5cclxuLyogQmFsYW5jZSB0ZXh0IHdyYXBwaW5nIG9uIGhlYWRpbmdzICovXHJcbmgxLFxyXG5oMixcclxuaDMsXHJcbmg0IHtcclxuICAgIHRleHQtd3JhcDogYmFsYW5jZTtcclxufVxyXG5cclxuLyogQSBlbGVtZW50cyB0aGF0IGRvbid0IGhhdmUgYSBjbGFzcyBnZXQgZGVmYXVsdCBzdHlsZXMgKi9cclxuYTpub3QoW2NsYXNzXSkge1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uLXNraXAtaW5rOiBhdXRvO1xyXG4gICAgY29sb3I6IGN1cnJlbnRDb2xvcjtcclxufVxyXG5cclxuLyogTWFrZSBpbWFnZXMgZWFzaWVyIHRvIHdvcmsgd2l0aCAqL1xyXG5pbWcsXHJcbnBpY3R1cmUge1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi8qIEluaGVyaXQgZm9udHMgZm9yIGlucHV0cyBhbmQgYnV0dG9ucyAqL1xyXG5pbnB1dCxcclxuYnV0dG9uLFxyXG50ZXh0YXJlYSxcclxuc2VsZWN0IHtcclxuICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xyXG4gICAgZm9udC1zaXplOiBpbmhlcml0O1xyXG59XHJcblxyXG4vKiBNYWtlIHN1cmUgdGV4dGFyZWFzIHdpdGhvdXQgYSByb3dzIGF0dHJpYnV0ZSBhcmUgbm90IHRpbnkgKi9cclxudGV4dGFyZWE6bm90KFtyb3dzXSkge1xyXG4gICAgbWluLWhlaWdodDogNmVtO1xyXG59XHJcblxyXG4vKiBBbnl0aGluZyB0aGF0IGhhcyBiZWVuIGFuY2hvcmVkIHRvIHNob3VsZCBoYXZlIGV4dHJhIHNjcm9sbCBtYXJnaW4gKi9cclxuOnRhcmdldCB7XHJcbiAgICBzY3JvbGwtbWFyZ2luLWJsb2NrOiA1ZXg7XHJcbn1cclxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL3Jlc2V0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxxQkFBcUI7QUFDckI7OztJQUdJLHNCQUFzQjtBQUMxQjs7QUFFQSxnQ0FBZ0M7QUFDaEM7SUFDSSwyQkFBMkI7SUFDM0IsOEJBQThCO0lBQzlCLHNCQUFzQjtBQUMxQjs7QUFFQSxzRUFBc0U7QUFDdEU7Ozs7Ozs7Ozs7SUFVSSxtQkFBbUI7QUFDdkI7O0FBRUEsMkdBQTJHO0FBQzNHOztJQUVJLGdCQUFnQjtBQUNwQjs7QUFFQSwyQkFBMkI7QUFDM0I7SUFDSSxpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCOztBQUVBLGtFQUFrRTtBQUNsRTs7Ozs7OztJQU9JLGdCQUFnQjtBQUNwQjs7QUFFQSxzQ0FBc0M7QUFDdEM7Ozs7SUFJSSxrQkFBa0I7QUFDdEI7O0FBRUEsMERBQTBEO0FBQzFEO0lBQ0ksOEJBQThCO0lBQzlCLG1CQUFtQjtBQUN2Qjs7QUFFQSxvQ0FBb0M7QUFDcEM7O0lBRUksZUFBZTtJQUNmLGNBQWM7QUFDbEI7O0FBRUEseUNBQXlDO0FBQ3pDOzs7O0lBSUksb0JBQW9CO0lBQ3BCLGtCQUFrQjtBQUN0Qjs7QUFFQSw4REFBOEQ7QUFDOUQ7SUFDSSxlQUFlO0FBQ25COztBQUVBLHVFQUF1RTtBQUN2RTtJQUNJLHdCQUF3QjtBQUM1QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKiBCb3ggc2l6aW5nIHJ1bGVzICovXFxyXFxuKixcXHJcXG4qOjpiZWZvcmUsXFxyXFxuKjo6YWZ0ZXIge1xcclxcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbn1cXHJcXG5cXHJcXG4vKiBQcmV2ZW50IGZvbnQgc2l6ZSBpbmZsYXRpb24gKi9cXHJcXG5odG1sIHtcXHJcXG4gICAgLW1vei10ZXh0LXNpemUtYWRqdXN0OiBub25lO1xcclxcbiAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IG5vbmU7XFxyXFxuICAgIHRleHQtc2l6ZS1hZGp1c3Q6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi8qIFJlbW92ZSBkZWZhdWx0IG1hcmdpbiBpbiBmYXZvdXIgb2YgYmV0dGVyIGNvbnRyb2wgaW4gYXV0aG9yZWQgQ1NTICovXFxyXFxuYm9keSxcXHJcXG5oMSxcXHJcXG5oMixcXHJcXG5oMyxcXHJcXG5oNCxcXHJcXG5wLFxcclxcbmZpZ3VyZSxcXHJcXG5ibG9ja3F1b3RlLFxcclxcbmRsLFxcclxcbmRkIHtcXHJcXG4gICAgbWFyZ2luLWJsb2NrLWVuZDogMDtcXHJcXG59XFxyXFxuXFxyXFxuLyogUmVtb3ZlIGxpc3Qgc3R5bGVzIG9uIHVsLCBvbCBlbGVtZW50cyB3aXRoIGEgbGlzdCByb2xlLCB3aGljaCBzdWdnZXN0cyBkZWZhdWx0IHN0eWxpbmcgd2lsbCBiZSByZW1vdmVkICovXFxyXFxudWxbcm9sZT1cXFwibGlzdFxcXCJdLFxcclxcbm9sW3JvbGU9XFxcImxpc3RcXFwiXSB7XFxyXFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi8qIFNldCBjb3JlIGJvZHkgZGVmYXVsdHMgKi9cXHJcXG5ib2R5IHtcXHJcXG4gICAgbWluLWhlaWdodDogMTAwdmg7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XFxyXFxufVxcclxcblxcclxcbi8qIFNldCBzaG9ydGVyIGxpbmUgaGVpZ2h0cyBvbiBoZWFkaW5ncyBhbmQgaW50ZXJhY3RpdmUgZWxlbWVudHMgKi9cXHJcXG5oMSxcXHJcXG5oMixcXHJcXG5oMyxcXHJcXG5oNCxcXHJcXG5idXR0b24sXFxyXFxuaW5wdXQsXFxyXFxubGFiZWwge1xcclxcbiAgICBsaW5lLWhlaWdodDogMS4xO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBCYWxhbmNlIHRleHQgd3JhcHBpbmcgb24gaGVhZGluZ3MgKi9cXHJcXG5oMSxcXHJcXG5oMixcXHJcXG5oMyxcXHJcXG5oNCB7XFxyXFxuICAgIHRleHQtd3JhcDogYmFsYW5jZTtcXHJcXG59XFxyXFxuXFxyXFxuLyogQSBlbGVtZW50cyB0aGF0IGRvbid0IGhhdmUgYSBjbGFzcyBnZXQgZGVmYXVsdCBzdHlsZXMgKi9cXHJcXG5hOm5vdChbY2xhc3NdKSB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbi1za2lwLWluazogYXV0bztcXHJcXG4gICAgY29sb3I6IGN1cnJlbnRDb2xvcjtcXHJcXG59XFxyXFxuXFxyXFxuLyogTWFrZSBpbWFnZXMgZWFzaWVyIHRvIHdvcmsgd2l0aCAqL1xcclxcbmltZyxcXHJcXG5waWN0dXJlIHtcXHJcXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG59XFxyXFxuXFxyXFxuLyogSW5oZXJpdCBmb250cyBmb3IgaW5wdXRzIGFuZCBidXR0b25zICovXFxyXFxuaW5wdXQsXFxyXFxuYnV0dG9uLFxcclxcbnRleHRhcmVhLFxcclxcbnNlbGVjdCB7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xcclxcbiAgICBmb250LXNpemU6IGluaGVyaXQ7XFxyXFxufVxcclxcblxcclxcbi8qIE1ha2Ugc3VyZSB0ZXh0YXJlYXMgd2l0aG91dCBhIHJvd3MgYXR0cmlidXRlIGFyZSBub3QgdGlueSAqL1xcclxcbnRleHRhcmVhOm5vdChbcm93c10pIHtcXHJcXG4gICAgbWluLWhlaWdodDogNmVtO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBBbnl0aGluZyB0aGF0IGhhcyBiZWVuIGFuY2hvcmVkIHRvIHNob3VsZCBoYXZlIGV4dHJhIHNjcm9sbCBtYXJnaW4gKi9cXHJcXG46dGFyZ2V0IHtcXHJcXG4gICAgc2Nyb2xsLW1hcmdpbi1ibG9jazogNWV4O1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///790\n')},825:module=>{eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNS10b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanM/ZTQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///825\n')},846:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `#iconDialog {\r\n    width: 220px;\r\n    height: 60%;\r\n    background: none;\r\n    border: 0;\r\n\r\n    .dialog {\r\n        display: flex;\r\n        width: 100%;\r\n        padding: 8px;\r\n\r\n        /* css glass effect */\r\n        background: rgba(73, 56, 137, 0.75);\r\n        box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\r\n        backdrop-filter: blur(1px);\r\n        -webkit-backdrop-filter: blur(1px);\r\n\r\n        #iconSelection {\r\n            display: flex;\r\n            justify-content: center;\r\n            flex-wrap: wrap;\r\n            width: 100%;\r\n            height: 100%;\r\n            gap: 8px;\r\n\r\n            span {\r\n                font-size: 48px;\r\n                padding: 5px;\r\n                background-color: white;\r\n                border-radius: 50%;\r\n                flex: 1;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n    }\r\n\r\n    .task-icon:hover .blue-icon {\r\n        opacity: 0.5;\r\n    }\r\n}\r\n`, "",{"version":3,"sources":["webpack://./src/css/icon-select-dialog.css"],"names":[],"mappings":"AAAA;IACI,YAAY;IACZ,WAAW;IACX,gBAAgB;IAChB,SAAS;;IAET;QACI,aAAa;QACb,WAAW;QACX,YAAY;;QAEZ,qBAAqB;QACrB,mCAAmC;QACnC,yCAAyC;QACzC,0BAA0B;QAC1B,kCAAkC;;QAElC;YACI,aAAa;YACb,uBAAuB;YACvB,eAAe;YACf,WAAW;YACX,YAAY;YACZ,QAAQ;;YAER;gBACI,eAAe;gBACf,YAAY;gBACZ,uBAAuB;gBACvB,kBAAkB;gBAClB,OAAO;gBACP,eAAe;YACnB;QACJ;IACJ;;IAEA;QACI,YAAY;IAChB;AACJ","sourcesContent":["#iconDialog {\\r\\n    width: 220px;\\r\\n    height: 60%;\\r\\n    background: none;\\r\\n    border: 0;\\r\\n\\r\\n    .dialog {\\r\\n        display: flex;\\r\\n        width: 100%;\\r\\n        padding: 8px;\\r\\n\\r\\n        /* css glass effect */\\r\\n        background: rgba(73, 56, 137, 0.75);\\r\\n        box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\\r\\n        backdrop-filter: blur(1px);\\r\\n        -webkit-backdrop-filter: blur(1px);\\r\\n\\r\\n        #iconSelection {\\r\\n            display: flex;\\r\\n            justify-content: center;\\r\\n            flex-wrap: wrap;\\r\\n            width: 100%;\\r\\n            height: 100%;\\r\\n            gap: 8px;\\r\\n\\r\\n            span {\\r\\n                font-size: 48px;\\r\\n                padding: 5px;\\r\\n                background-color: white;\\r\\n                border-radius: 50%;\\r\\n                flex: 1;\\r\\n                cursor: pointer;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    .task-icon:hover .blue-icon {\\r\\n        opacity: 0.5;\\r\\n    }\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQ2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUM2RztBQUNqQjtBQUM1Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLGlHQUFpRyxVQUFVLFVBQVUsWUFBWSxZQUFZLEtBQUssVUFBVSxVQUFVLFdBQVcsWUFBWSxhQUFhLGFBQWEsYUFBYSxjQUFjLE1BQU0sVUFBVSxZQUFZLFdBQVcsVUFBVSxVQUFVLFdBQVcsS0FBSyxXQUFXLFdBQVcsYUFBYSxjQUFjLFlBQVksV0FBVyxNQUFNLEtBQUssTUFBTSxLQUFLLFVBQVUsTUFBTSxzQ0FBc0MscUJBQXFCLG9CQUFvQix5QkFBeUIsa0JBQWtCLHFCQUFxQiwwQkFBMEIsd0JBQXdCLHlCQUF5QixzRkFBc0Ysc0RBQXNELHVDQUF1QywrQ0FBK0MsZ0NBQWdDLDhCQUE4Qix3Q0FBd0MsZ0NBQWdDLDRCQUE0Qiw2QkFBNkIseUJBQXlCLDBCQUEwQixvQ0FBb0MsaUNBQWlDLDRDQUE0Qyx1Q0FBdUMsNEJBQTRCLG9DQUFvQyxpQkFBaUIsYUFBYSxTQUFTLHlDQUF5Qyx5QkFBeUIsU0FBUyxLQUFLLHVCQUF1QjtBQUN0OEM7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjUtdG9kby8uL3NyYy9jc3MvaWNvbi1zZWxlY3QtZGlhbG9nLmNzcz9hN2JhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAjaWNvbkRpYWxvZyB7XHJcbiAgICB3aWR0aDogMjIwcHg7XHJcbiAgICBoZWlnaHQ6IDYwJTtcclxuICAgIGJhY2tncm91bmQ6IG5vbmU7XHJcbiAgICBib3JkZXI6IDA7XHJcblxyXG4gICAgLmRpYWxvZyB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBwYWRkaW5nOiA4cHg7XHJcblxyXG4gICAgICAgIC8qIGNzcyBnbGFzcyBlZmZlY3QgKi9cclxuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDczLCA1NiwgMTM3LCAwLjc1KTtcclxuICAgICAgICBib3gtc2hhZG93OiAwIDRweCAzMHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICAgICAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMXB4KTtcclxuICAgICAgICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigxcHgpO1xyXG5cclxuICAgICAgICAjaWNvblNlbGVjdGlvbiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgIGdhcDogOHB4O1xyXG5cclxuICAgICAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDQ4cHg7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA1cHg7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgICAgICAgICAgICAgIGZsZXg6IDE7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLnRhc2staWNvbjpob3ZlciAuYmx1ZS1pY29uIHtcclxuICAgICAgICBvcGFjaXR5OiAwLjU7XHJcbiAgICB9XHJcbn1cclxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2ljb24tc2VsZWN0LWRpYWxvZy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxZQUFZO0lBQ1osV0FBVztJQUNYLGdCQUFnQjtJQUNoQixTQUFTOztJQUVUO1FBQ0ksYUFBYTtRQUNiLFdBQVc7UUFDWCxZQUFZOztRQUVaLHFCQUFxQjtRQUNyQixtQ0FBbUM7UUFDbkMseUNBQXlDO1FBQ3pDLDBCQUEwQjtRQUMxQixrQ0FBa0M7O1FBRWxDO1lBQ0ksYUFBYTtZQUNiLHVCQUF1QjtZQUN2QixlQUFlO1lBQ2YsV0FBVztZQUNYLFlBQVk7WUFDWixRQUFROztZQUVSO2dCQUNJLGVBQWU7Z0JBQ2YsWUFBWTtnQkFDWix1QkFBdUI7Z0JBQ3ZCLGtCQUFrQjtnQkFDbEIsT0FBTztnQkFDUCxlQUFlO1lBQ25CO1FBQ0o7SUFDSjs7SUFFQTtRQUNJLFlBQVk7SUFDaEI7QUFDSlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIjaWNvbkRpYWxvZyB7XFxyXFxuICAgIHdpZHRoOiAyMjBweDtcXHJcXG4gICAgaGVpZ2h0OiA2MCU7XFxyXFxuICAgIGJhY2tncm91bmQ6IG5vbmU7XFxyXFxuICAgIGJvcmRlcjogMDtcXHJcXG5cXHJcXG4gICAgLmRpYWxvZyB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBwYWRkaW5nOiA4cHg7XFxyXFxuXFxyXFxuICAgICAgICAvKiBjc3MgZ2xhc3MgZWZmZWN0ICovXFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDczLCA1NiwgMTM3LCAwLjc1KTtcXHJcXG4gICAgICAgIGJveC1zaGFkb3c6IDAgNHB4IDMwcHggcmdiYSgwLCAwLCAwLCAwLjEpO1xcclxcbiAgICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDFweCk7XFxyXFxuICAgICAgICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigxcHgpO1xcclxcblxcclxcbiAgICAgICAgI2ljb25TZWxlY3Rpb24ge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgICAgICAgICBnYXA6IDhweDtcXHJcXG5cXHJcXG4gICAgICAgICAgICBzcGFuIHtcXHJcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiA0OHB4O1xcclxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA1cHg7XFxyXFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcclxcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICAgICAgICAgICAgICAgIGZsZXg6IDE7XFxyXFxuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnRhc2staWNvbjpob3ZlciAuYmx1ZS1pY29uIHtcXHJcXG4gICAgICAgIG9wYWNpdHk6IDAuNTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///846\n')},915:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `:root {\r\n    --width__sidebar: 150px;\r\n}\r\n\r\n.sidebar {\r\n    width: var(--width__sidebar);\r\n    height: 100%;\r\n    background-color: white;\r\n    transition: 0.5s;\r\n    position: absolute;\r\n    z-index: 5;\r\n\r\n    /* glassmorphism effect */\r\n    /* From https://css.glass */\r\n    background: rgba(255, 255, 255, 0.45);\r\n    border-radius: 0 16px 16px 0;\r\n    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\r\n    backdrop-filter: blur(4.9px);\r\n    -webkit-backdrop-filter: blur(4.9px);\r\n    border: 1px solid rgba(255, 255, 255, 0.57);\r\n\r\n    /* Animation while closed */\r\n    &.is-closed {\r\n        /* -1 is so when closed it is in the opposite direction */\r\n        transform: translateX(calc(-1 * (var(--width__sidebar))));\r\n    }\r\n\r\n    /* Overwrite to fill the icons in here */\r\n    .material-symbols-sharp {\r\n        font-variation-settings:\r\n            "FILL" 0,\r\n            "wght" 300,\r\n            "GRAD" 0,\r\n            "opsz" 48;\r\n        font-size: 32px;\r\n    }\r\n\r\n    nav {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: flex-end;\r\n        align-items: end;\r\n        height: 50px;\r\n\r\n        .todo-count {\r\n            padding: 0 20px 0 0;\r\n            font-size: 16px;\r\n            font-weight: 400;\r\n        }\r\n    }\r\n\r\n    #todoList {\r\n        display: flex;\r\n        flex-direction: column;\r\n        padding-top: 50px;\r\n        gap: 15px;\r\n\r\n        .todo {\r\n            display: flex;\r\n            flex-direction: row;\r\n            align-items: center;\r\n\r\n            span {\r\n                margin: 0 5px;\r\n            }\r\n\r\n            h3 {\r\n                margin: 0;\r\n                font-size: 24px;\r\n                font-weight: 500;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\naside > footer {\r\n    display: flex;\r\n    justify-content: center;\r\n    padding: 10px;\r\n\r\n    button {\r\n        width: 75%;\r\n        align-items: center;\r\n        background: #f5f5fa;\r\n        border-width: 1px;\r\n        border-radius: 10%;\r\n        box-shadow:\r\n            -10px -10px 30px 0 #fff,\r\n            10px 10px 30px 0 #1d0dca17;\r\n        box-sizing: border-box;\r\n        color: #2a1f62;\r\n        cursor: pointer;\r\n        display: flex;\r\n        justify-content: center;\r\n        transition: 0.2s;\r\n        user-select: none;\r\n        -webkit-user-select: none;\r\n        touch-action: manipulation;\r\n        white-space: pre;\r\n        word-break: normal;\r\n        word-spacing: normal;\r\n        & .material-symbols-sharp {\r\n            font-size: 42px !important;\r\n        }\r\n    }\r\n\r\n    button:hover {\r\n        background: #f8f8ff;\r\n        box-shadow:\r\n            -15px -15px 30px 0 #fff,\r\n            15px 15px 30px 0 #1d0dca17;\r\n    }\r\n}\r\n\r\n#addTodoDialog .dialog-header {\r\n    justify-content: space-between;\r\n\r\n    button {\r\n        background: none;\r\n        border: none;\r\n    }\r\n}\r\n\r\n/* Animation for ShowTodos svg.ham */\r\n.black {\r\n    filter: invert(100%);\r\n}\r\n`, "",{"version":3,"sources":["webpack://./src/css/sidebar.css"],"names":[],"mappings":"AAAA;IACI,uBAAuB;AAC3B;;AAEA;IACI,4BAA4B;IAC5B,YAAY;IACZ,uBAAuB;IACvB,gBAAgB;IAChB,kBAAkB;IAClB,UAAU;;IAEV,yBAAyB;IACzB,2BAA2B;IAC3B,qCAAqC;IACrC,4BAA4B;IAC5B,yCAAyC;IACzC,4BAA4B;IAC5B,oCAAoC;IACpC,2CAA2C;;IAE3C,2BAA2B;IAC3B;QACI,yDAAyD;QACzD,yDAAyD;IAC7D;;IAEA,wCAAwC;IACxC;QACI;;;;qBAIa;QACb,eAAe;IACnB;;IAEA;QACI,aAAa;QACb,mBAAmB;QACnB,yBAAyB;QACzB,gBAAgB;QAChB,YAAY;;QAEZ;YACI,mBAAmB;YACnB,eAAe;YACf,gBAAgB;QACpB;IACJ;;IAEA;QACI,aAAa;QACb,sBAAsB;QACtB,iBAAiB;QACjB,SAAS;;QAET;YACI,aAAa;YACb,mBAAmB;YACnB,mBAAmB;;YAEnB;gBACI,aAAa;YACjB;;YAEA;gBACI,SAAS;gBACT,eAAe;gBACf,gBAAgB;YACpB;QACJ;IACJ;AACJ;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,aAAa;;IAEb;QACI,UAAU;QACV,mBAAmB;QACnB,mBAAmB;QACnB,iBAAiB;QACjB,kBAAkB;QAClB;;sCAE8B;QAC9B,sBAAsB;QACtB,cAAc;QACd,eAAe;QACf,aAAa;QACb,uBAAuB;QACvB,gBAAgB;QAChB,iBAAiB;QACjB,yBAAyB;QACzB,0BAA0B;QAC1B,gBAAgB;QAChB,kBAAkB;QAClB,oBAAoB;QACpB;YACI,0BAA0B;QAC9B;IACJ;;IAEA;QACI,mBAAmB;QACnB;;sCAE8B;IAClC;AACJ;;AAEA;IACI,8BAA8B;;IAE9B;QACI,gBAAgB;QAChB,YAAY;IAChB;AACJ;;AAEA,oCAAoC;AACpC;IACI,oBAAoB;AACxB","sourcesContent":[":root {\\r\\n    --width__sidebar: 150px;\\r\\n}\\r\\n\\r\\n.sidebar {\\r\\n    width: var(--width__sidebar);\\r\\n    height: 100%;\\r\\n    background-color: white;\\r\\n    transition: 0.5s;\\r\\n    position: absolute;\\r\\n    z-index: 5;\\r\\n\\r\\n    /* glassmorphism effect */\\r\\n    /* From https://css.glass */\\r\\n    background: rgba(255, 255, 255, 0.45);\\r\\n    border-radius: 0 16px 16px 0;\\r\\n    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\\r\\n    backdrop-filter: blur(4.9px);\\r\\n    -webkit-backdrop-filter: blur(4.9px);\\r\\n    border: 1px solid rgba(255, 255, 255, 0.57);\\r\\n\\r\\n    /* Animation while closed */\\r\\n    &.is-closed {\\r\\n        /* -1 is so when closed it is in the opposite direction */\\r\\n        transform: translateX(calc(-1 * (var(--width__sidebar))));\\r\\n    }\\r\\n\\r\\n    /* Overwrite to fill the icons in here */\\r\\n    .material-symbols-sharp {\\r\\n        font-variation-settings:\\r\\n            \\"FILL\\" 0,\\r\\n            \\"wght\\" 300,\\r\\n            \\"GRAD\\" 0,\\r\\n            \\"opsz\\" 48;\\r\\n        font-size: 32px;\\r\\n    }\\r\\n\\r\\n    nav {\\r\\n        display: flex;\\r\\n        flex-direction: row;\\r\\n        justify-content: flex-end;\\r\\n        align-items: end;\\r\\n        height: 50px;\\r\\n\\r\\n        .todo-count {\\r\\n            padding: 0 20px 0 0;\\r\\n            font-size: 16px;\\r\\n            font-weight: 400;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    #todoList {\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        padding-top: 50px;\\r\\n        gap: 15px;\\r\\n\\r\\n        .todo {\\r\\n            display: flex;\\r\\n            flex-direction: row;\\r\\n            align-items: center;\\r\\n\\r\\n            span {\\r\\n                margin: 0 5px;\\r\\n            }\\r\\n\\r\\n            h3 {\\r\\n                margin: 0;\\r\\n                font-size: 24px;\\r\\n                font-weight: 500;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\naside > footer {\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    padding: 10px;\\r\\n\\r\\n    button {\\r\\n        width: 75%;\\r\\n        align-items: center;\\r\\n        background: #f5f5fa;\\r\\n        border-width: 1px;\\r\\n        border-radius: 10%;\\r\\n        box-shadow:\\r\\n            -10px -10px 30px 0 #fff,\\r\\n            10px 10px 30px 0 #1d0dca17;\\r\\n        box-sizing: border-box;\\r\\n        color: #2a1f62;\\r\\n        cursor: pointer;\\r\\n        display: flex;\\r\\n        justify-content: center;\\r\\n        transition: 0.2s;\\r\\n        user-select: none;\\r\\n        -webkit-user-select: none;\\r\\n        touch-action: manipulation;\\r\\n        white-space: pre;\\r\\n        word-break: normal;\\r\\n        word-spacing: normal;\\r\\n        & .material-symbols-sharp {\\r\\n            font-size: 42px !important;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    button:hover {\\r\\n        background: #f8f8ff;\\r\\n        box-shadow:\\r\\n            -15px -15px 30px 0 #fff,\\r\\n            15px 15px 30px 0 #1d0dca17;\\r\\n    }\\r\\n}\\r\\n\\r\\n#addTodoDialog .dialog-header {\\r\\n    justify-content: space-between;\\r\\n\\r\\n    button {\\r\\n        background: none;\\r\\n        border: none;\\r\\n    }\\r\\n}\\r\\n\\r\\n/* Animation for ShowTodos svg.ham */\\r\\n.black {\\r\\n    filter: invert(100%);\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTE1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUM2RztBQUNqQjtBQUM1Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHNGQUFzRixZQUFZLE9BQU8sS0FBSyxZQUFZLFdBQVcsWUFBWSxhQUFhLGFBQWEsWUFBWSxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGNBQWMsYUFBYSxNQUFNLFlBQVksYUFBYSxPQUFPLFlBQVksTUFBTSxRQUFRLE1BQU0sVUFBVSxPQUFPLEtBQUssVUFBVSxZQUFZLGFBQWEsYUFBYSxZQUFZLEtBQUssWUFBWSxXQUFXLFlBQVksTUFBTSxNQUFNLEtBQUssVUFBVSxZQUFZLGFBQWEsWUFBWSxLQUFLLFVBQVUsWUFBWSxjQUFjLE1BQU0sV0FBVyxPQUFPLEtBQUssV0FBVyxXQUFXLGFBQWEsTUFBTSxLQUFLLEtBQUssTUFBTSxLQUFLLFVBQVUsWUFBWSxZQUFZLEtBQUssVUFBVSxZQUFZLGFBQWEsYUFBYSxhQUFhLE9BQU8sT0FBTyxhQUFhLFdBQVcsVUFBVSxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxNQUFNLFlBQVksTUFBTSxNQUFNLEtBQUssWUFBWSxPQUFPLE9BQU8sTUFBTSxNQUFNLEtBQUssYUFBYSxNQUFNLFlBQVksV0FBVyxNQUFNLE1BQU0sWUFBWSxNQUFNLFlBQVksaUNBQWlDLGdDQUFnQyxLQUFLLGtCQUFrQixxQ0FBcUMscUJBQXFCLGdDQUFnQyx5QkFBeUIsMkJBQTJCLG1CQUFtQix3SEFBd0gscUNBQXFDLGtEQUFrRCxxQ0FBcUMsNkNBQTZDLG9EQUFvRCw2REFBNkQsNElBQTRJLFNBQVMsc0ZBQXNGLG1KQUFtSiw0QkFBNEIsU0FBUyxpQkFBaUIsMEJBQTBCLGdDQUFnQyxzQ0FBc0MsNkJBQTZCLHlCQUF5Qiw2QkFBNkIsb0NBQW9DLGdDQUFnQyxpQ0FBaUMsYUFBYSxTQUFTLHVCQUF1QiwwQkFBMEIsbUNBQW1DLDhCQUE4QixzQkFBc0IsdUJBQXVCLDhCQUE4QixvQ0FBb0Msb0NBQW9DLDBCQUEwQixrQ0FBa0MsaUJBQWlCLHdCQUF3Qiw4QkFBOEIsb0NBQW9DLHFDQUFxQyxpQkFBaUIsYUFBYSxTQUFTLEtBQUssd0JBQXdCLHNCQUFzQixnQ0FBZ0Msc0JBQXNCLG9CQUFvQix1QkFBdUIsZ0NBQWdDLGdDQUFnQyw4QkFBOEIsK0JBQStCLDBHQUEwRyxtQ0FBbUMsMkJBQTJCLDRCQUE0QiwwQkFBMEIsb0NBQW9DLDZCQUE2Qiw4QkFBOEIsc0NBQXNDLHVDQUF1Qyw2QkFBNkIsK0JBQStCLGlDQUFpQyx1Q0FBdUMsMkNBQTJDLGFBQWEsU0FBUywwQkFBMEIsZ0NBQWdDLDBHQUEwRyxTQUFTLEtBQUssdUNBQXVDLHVDQUF1QyxvQkFBb0IsNkJBQTZCLHlCQUF5QixTQUFTLEtBQUsseURBQXlELDZCQUE2QixLQUFLLHVCQUF1QjtBQUM3dUk7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwMjUtdG9kby8uL3NyYy9jc3Mvc2lkZWJhci5jc3M/MmU1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgOnJvb3Qge1xyXG4gICAgLS13aWR0aF9fc2lkZWJhcjogMTUwcHg7XHJcbn1cclxuXHJcbi5zaWRlYmFyIHtcclxuICAgIHdpZHRoOiB2YXIoLS13aWR0aF9fc2lkZWJhcik7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgIHRyYW5zaXRpb246IDAuNXM7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB6LWluZGV4OiA1O1xyXG5cclxuICAgIC8qIGdsYXNzbW9ycGhpc20gZWZmZWN0ICovXHJcbiAgICAvKiBGcm9tIGh0dHBzOi8vY3NzLmdsYXNzICovXHJcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNDUpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMCAxNnB4IDE2cHggMDtcclxuICAgIGJveC1zaGFkb3c6IDAgNHB4IDMwcHggcmdiYSgwLCAwLCAwLCAwLjEpO1xyXG4gICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDQuOXB4KTtcclxuICAgIC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDQuOXB4KTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41Nyk7XHJcblxyXG4gICAgLyogQW5pbWF0aW9uIHdoaWxlIGNsb3NlZCAqL1xyXG4gICAgJi5pcy1jbG9zZWQge1xyXG4gICAgICAgIC8qIC0xIGlzIHNvIHdoZW4gY2xvc2VkIGl0IGlzIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gKi9cclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoY2FsYygtMSAqICh2YXIoLS13aWR0aF9fc2lkZWJhcikpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogT3ZlcndyaXRlIHRvIGZpbGwgdGhlIGljb25zIGluIGhlcmUgKi9cclxuICAgIC5tYXRlcmlhbC1zeW1ib2xzLXNoYXJwIHtcclxuICAgICAgICBmb250LXZhcmlhdGlvbi1zZXR0aW5nczpcclxuICAgICAgICAgICAgXCJGSUxMXCIgMCxcclxuICAgICAgICAgICAgXCJ3Z2h0XCIgMzAwLFxyXG4gICAgICAgICAgICBcIkdSQURcIiAwLFxyXG4gICAgICAgICAgICBcIm9wc3pcIiA0ODtcclxuICAgICAgICBmb250LXNpemU6IDMycHg7XHJcbiAgICB9XHJcblxyXG4gICAgbmF2IHtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcclxuICAgICAgICBhbGlnbi1pdGVtczogZW5kO1xyXG4gICAgICAgIGhlaWdodDogNTBweDtcclxuXHJcbiAgICAgICAgLnRvZG8tY291bnQge1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAwIDIwcHggMCAwO1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICN0b2RvTGlzdCB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiA1MHB4O1xyXG4gICAgICAgIGdhcDogMTVweDtcclxuXHJcbiAgICAgICAgLnRvZG8ge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cclxuICAgICAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IDAgNXB4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoMyB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNTAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5hc2lkZSA+IGZvb3RlciB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG5cclxuICAgIGJ1dHRvbiB7XHJcbiAgICAgICAgd2lkdGg6IDc1JTtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICNmNWY1ZmE7XHJcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHg7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTAlO1xyXG4gICAgICAgIGJveC1zaGFkb3c6XHJcbiAgICAgICAgICAgIC0xMHB4IC0xMHB4IDMwcHggMCAjZmZmLFxyXG4gICAgICAgICAgICAxMHB4IDEwcHggMzBweCAwICMxZDBkY2ExNztcclxuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgICAgIGNvbG9yOiAjMmExZjYyO1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIHRyYW5zaXRpb246IDAuMnM7XHJcbiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgICAgICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcclxuICAgICAgICB3aGl0ZS1zcGFjZTogcHJlO1xyXG4gICAgICAgIHdvcmQtYnJlYWs6IG5vcm1hbDtcclxuICAgICAgICB3b3JkLXNwYWNpbmc6IG5vcm1hbDtcclxuICAgICAgICAmIC5tYXRlcmlhbC1zeW1ib2xzLXNoYXJwIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiA0MnB4ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGJ1dHRvbjpob3ZlciB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogI2Y4ZjhmZjtcclxuICAgICAgICBib3gtc2hhZG93OlxyXG4gICAgICAgICAgICAtMTVweCAtMTVweCAzMHB4IDAgI2ZmZixcclxuICAgICAgICAgICAgMTVweCAxNXB4IDMwcHggMCAjMWQwZGNhMTc7XHJcbiAgICB9XHJcbn1cclxuXHJcbiNhZGRUb2RvRGlhbG9nIC5kaWFsb2ctaGVhZGVyIHtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuXHJcbiAgICBidXR0b24ge1xyXG4gICAgICAgIGJhY2tncm91bmQ6IG5vbmU7XHJcbiAgICAgICAgYm9yZGVyOiBub25lO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiBBbmltYXRpb24gZm9yIFNob3dUb2RvcyBzdmcuaGFtICovXHJcbi5ibGFjayB7XHJcbiAgICBmaWx0ZXI6IGludmVydCgxMDAlKTtcclxufVxyXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3Mvc2lkZWJhci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSx1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSw0QkFBNEI7SUFDNUIsWUFBWTtJQUNaLHVCQUF1QjtJQUN2QixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLFVBQVU7O0lBRVYseUJBQXlCO0lBQ3pCLDJCQUEyQjtJQUMzQixxQ0FBcUM7SUFDckMsNEJBQTRCO0lBQzVCLHlDQUF5QztJQUN6Qyw0QkFBNEI7SUFDNUIsb0NBQW9DO0lBQ3BDLDJDQUEyQzs7SUFFM0MsMkJBQTJCO0lBQzNCO1FBQ0kseURBQXlEO1FBQ3pELHlEQUF5RDtJQUM3RDs7SUFFQSx3Q0FBd0M7SUFDeEM7UUFDSTs7OztxQkFJYTtRQUNiLGVBQWU7SUFDbkI7O0lBRUE7UUFDSSxhQUFhO1FBQ2IsbUJBQW1CO1FBQ25CLHlCQUF5QjtRQUN6QixnQkFBZ0I7UUFDaEIsWUFBWTs7UUFFWjtZQUNJLG1CQUFtQjtZQUNuQixlQUFlO1lBQ2YsZ0JBQWdCO1FBQ3BCO0lBQ0o7O0lBRUE7UUFDSSxhQUFhO1FBQ2Isc0JBQXNCO1FBQ3RCLGlCQUFpQjtRQUNqQixTQUFTOztRQUVUO1lBQ0ksYUFBYTtZQUNiLG1CQUFtQjtZQUNuQixtQkFBbUI7O1lBRW5CO2dCQUNJLGFBQWE7WUFDakI7O1lBRUE7Z0JBQ0ksU0FBUztnQkFDVCxlQUFlO2dCQUNmLGdCQUFnQjtZQUNwQjtRQUNKO0lBQ0o7QUFDSjs7QUFFQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsYUFBYTs7SUFFYjtRQUNJLFVBQVU7UUFDVixtQkFBbUI7UUFDbkIsbUJBQW1CO1FBQ25CLGlCQUFpQjtRQUNqQixrQkFBa0I7UUFDbEI7O3NDQUU4QjtRQUM5QixzQkFBc0I7UUFDdEIsY0FBYztRQUNkLGVBQWU7UUFDZixhQUFhO1FBQ2IsdUJBQXVCO1FBQ3ZCLGdCQUFnQjtRQUNoQixpQkFBaUI7UUFDakIseUJBQXlCO1FBQ3pCLDBCQUEwQjtRQUMxQixnQkFBZ0I7UUFDaEIsa0JBQWtCO1FBQ2xCLG9CQUFvQjtRQUNwQjtZQUNJLDBCQUEwQjtRQUM5QjtJQUNKOztJQUVBO1FBQ0ksbUJBQW1CO1FBQ25COztzQ0FFOEI7SUFDbEM7QUFDSjs7QUFFQTtJQUNJLDhCQUE4Qjs7SUFFOUI7UUFDSSxnQkFBZ0I7UUFDaEIsWUFBWTtJQUNoQjtBQUNKOztBQUVBLG9DQUFvQztBQUNwQztJQUNJLG9CQUFvQjtBQUN4QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxyXFxuICAgIC0td2lkdGhfX3NpZGViYXI6IDE1MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uc2lkZWJhciB7XFxyXFxuICAgIHdpZHRoOiB2YXIoLS13aWR0aF9fc2lkZWJhcik7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxuICAgIHRyYW5zaXRpb246IDAuNXM7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgei1pbmRleDogNTtcXHJcXG5cXHJcXG4gICAgLyogZ2xhc3Ntb3JwaGlzbSBlZmZlY3QgKi9cXHJcXG4gICAgLyogRnJvbSBodHRwczovL2Nzcy5nbGFzcyAqL1xcclxcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNDUpO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAwIDE2cHggMTZweCAwO1xcclxcbiAgICBib3gtc2hhZG93OiAwIDRweCAzMHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcXHJcXG4gICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDQuOXB4KTtcXHJcXG4gICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoNC45cHgpO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNTcpO1xcclxcblxcclxcbiAgICAvKiBBbmltYXRpb24gd2hpbGUgY2xvc2VkICovXFxyXFxuICAgICYuaXMtY2xvc2VkIHtcXHJcXG4gICAgICAgIC8qIC0xIGlzIHNvIHdoZW4gY2xvc2VkIGl0IGlzIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gKi9cXHJcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWChjYWxjKC0xICogKHZhcigtLXdpZHRoX19zaWRlYmFyKSkpKTtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAvKiBPdmVyd3JpdGUgdG8gZmlsbCB0aGUgaWNvbnMgaW4gaGVyZSAqL1xcclxcbiAgICAubWF0ZXJpYWwtc3ltYm9scy1zaGFycCB7XFxyXFxuICAgICAgICBmb250LXZhcmlhdGlvbi1zZXR0aW5nczpcXHJcXG4gICAgICAgICAgICBcXFwiRklMTFxcXCIgMCxcXHJcXG4gICAgICAgICAgICBcXFwid2dodFxcXCIgMzAwLFxcclxcbiAgICAgICAgICAgIFxcXCJHUkFEXFxcIiAwLFxcclxcbiAgICAgICAgICAgIFxcXCJvcHN6XFxcIiA0ODtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMzJweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBuYXYge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGVuZDtcXHJcXG4gICAgICAgIGhlaWdodDogNTBweDtcXHJcXG5cXHJcXG4gICAgICAgIC50b2RvLWNvdW50IHtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiAwIDIwcHggMCAwO1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICN0b2RvTGlzdCB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIHBhZGRpbmctdG9wOiA1MHB4O1xcclxcbiAgICAgICAgZ2FwOiAxNXB4O1xcclxcblxcclxcbiAgICAgICAgLnRvZG8ge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcblxcclxcbiAgICAgICAgICAgIHNwYW4ge1xcclxcbiAgICAgICAgICAgICAgICBtYXJnaW46IDAgNXB4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICBoMyB7XFxyXFxuICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xcclxcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5hc2lkZSA+IGZvb3RlciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcblxcclxcbiAgICBidXR0b24ge1xcclxcbiAgICAgICAgd2lkdGg6IDc1JTtcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiAjZjVmNWZhO1xcclxcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiAxMCU7XFxyXFxuICAgICAgICBib3gtc2hhZG93OlxcclxcbiAgICAgICAgICAgIC0xMHB4IC0xMHB4IDMwcHggMCAjZmZmLFxcclxcbiAgICAgICAgICAgIDEwcHggMTBweCAzMHB4IDAgIzFkMGRjYTE3O1xcclxcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgICAgIGNvbG9yOiAjMmExZjYyO1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgdHJhbnNpdGlvbjogMC4ycztcXHJcXG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAgIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xcclxcbiAgICAgICAgd2hpdGUtc3BhY2U6IHByZTtcXHJcXG4gICAgICAgIHdvcmQtYnJlYWs6IG5vcm1hbDtcXHJcXG4gICAgICAgIHdvcmQtc3BhY2luZzogbm9ybWFsO1xcclxcbiAgICAgICAgJiAubWF0ZXJpYWwtc3ltYm9scy1zaGFycCB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiA0MnB4ICFpbXBvcnRhbnQ7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgYnV0dG9uOmhvdmVyIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQ6ICNmOGY4ZmY7XFxyXFxuICAgICAgICBib3gtc2hhZG93OlxcclxcbiAgICAgICAgICAgIC0xNXB4IC0xNXB4IDMwcHggMCAjZmZmLFxcclxcbiAgICAgICAgICAgIDE1cHggMTVweCAzMHB4IDAgIzFkMGRjYTE3O1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbiNhZGRUb2RvRGlhbG9nIC5kaWFsb2ctaGVhZGVyIHtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcblxcclxcbiAgICBidXR0b24ge1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcXHJcXG4gICAgICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4vKiBBbmltYXRpb24gZm9yIFNob3dUb2RvcyBzdmcuaGFtICovXFxyXFxuLmJsYWNrIHtcXHJcXG4gICAgZmlsdGVyOiBpbnZlcnQoMTAwJSk7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///915\n')},944:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_reset_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(790);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_common_style_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(324);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_body_style_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(331);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_nav_style_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(600);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_add_task_dialog_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(169);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_icon_select_dialog_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(846);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_task_hover_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(989);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_hamburger_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(358);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_sidebar_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(915);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_tooltip_css__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(666);\n// Imports\n\n\n\n\n\n\n\n\n\n\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_reset_css__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_common_style_css__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_body_style_css__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_nav_style_css__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_add_task_dialog_css__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_icon_select_dialog_css__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_task_hover_css__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_hamburger_css__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_sidebar_css__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_tooltip_css__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .A);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `\r\n`, "",{"version":3,"sources":[],"names":[],"mappings":"","sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDNkc7QUFDakI7QUFDWTtBQUNPO0FBQ0Y7QUFDRDtBQUNNO0FBQ0c7QUFDUjtBQUNEO0FBQ0Y7QUFDQTtBQUMxRyw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GLDBCQUEwQiwrRkFBaUM7QUFDM0QsMEJBQTBCLHNHQUFpQztBQUMzRCwwQkFBMEIsb0dBQWlDO0FBQzNELDBCQUEwQixtR0FBaUM7QUFDM0QsMEJBQTBCLHlHQUFpQztBQUMzRCwwQkFBMEIsNEdBQWlDO0FBQzNELDBCQUEwQixvR0FBaUM7QUFDM0QsMEJBQTBCLG1HQUFpQztBQUMzRCwwQkFBMEIsa0dBQWlDO0FBQzNELDBCQUEwQixrR0FBaUM7QUFDM0Q7QUFDQTtBQUNBLE9BQU8sa0VBQWtFO0FBQ3pFO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDI1LXRvZG8vLi9zcmMvY3NzL21haW4uY3NzPzJjM2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVzZXQuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29tbW9uLXN0eWxlLmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMl9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2JvZHktc3R5bGUuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8zX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbmF2LXN0eWxlLmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfNF9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FkZC10YXNrLWRpYWxvZy5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzVfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pY29uLXNlbGVjdC1kaWFsb2cuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF82X19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdGFzay1ob3Zlci5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzdfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9oYW1idXJnZXIuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF84X19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2lkZWJhci5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzlfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi90b29sdGlwLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzJfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzNfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzVfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzZfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzdfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzhfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzlfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBcclxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///944\n')},989:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.task {\r\n    position: relative;\r\n}\r\n\r\n.task:before {\r\n    position: absolute;\r\n    background-color: rgba(10, 10, 10, 0.2);\r\n    content: "";\r\n    display: block;\r\n    width: 100%;\r\n    height: 0%;\r\n    left: 0;\r\n    bottom: 0;\r\n    transition: background 0.3s;\r\n    /* transition: all 300ms cubic-bezier(0.455, 0.03, 0.515, 0.955); */\r\n}\r\n\r\n.task:hover:before {\r\n    color: #fff;\r\n    height: 100%;\r\n}\r\n\r\n.hover-button {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    opacity: 0;\r\n    visibility: hidden;\r\n    transition:\r\n        opacity 0.3s ease,\r\n        visibility 0.3s;\r\n}\r\n\r\n.task:hover .hover-button {\r\n    opacity: 1;\r\n    visibility: visible;\r\n}\r\n`, "",{"version":3,"sources":["webpack://./src/css/task-hover.css"],"names":[],"mappings":"AAAA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,uCAAuC;IACvC,WAAW;IACX,cAAc;IACd,WAAW;IACX,UAAU;IACV,OAAO;IACP,SAAS;IACT,2BAA2B;IAC3B,mEAAmE;AACvE;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,UAAU;IACV,kBAAkB;IAClB;;uBAEmB;AACvB;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB","sourcesContent":[".task {\\r\\n    position: relative;\\r\\n}\\r\\n\\r\\n.task:before {\\r\\n    position: absolute;\\r\\n    background-color: rgba(10, 10, 10, 0.2);\\r\\n    content: \\"\\";\\r\\n    display: block;\\r\\n    width: 100%;\\r\\n    height: 0%;\\r\\n    left: 0;\\r\\n    bottom: 0;\\r\\n    transition: background 0.3s;\\r\\n    /* transition: all 300ms cubic-bezier(0.455, 0.03, 0.515, 0.955); */\\r\\n}\\r\\n\\r\\n.task:hover:before {\\r\\n    color: #fff;\\r\\n    height: 100%;\\r\\n}\\r\\n\\r\\n.hover-button {\\r\\n    position: absolute;\\r\\n    top: 50%;\\r\\n    left: 50%;\\r\\n    transform: translate(-50%, -50%);\\r\\n    opacity: 0;\\r\\n    visibility: hidden;\\r\\n    transition:\\r\\n        opacity 0.3s ease,\\r\\n        visibility 0.3s;\\r\\n}\\r\\n\\r\\n.task:hover .hover-button {\\r\\n    opacity: 1;\\r\\n    visibility: visible;\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTg5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUM2RztBQUNqQjtBQUM1Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyx5RkFBeUYsWUFBWSxPQUFPLEtBQUssWUFBWSxhQUFhLFdBQVcsVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFlBQVksYUFBYSxPQUFPLEtBQUssVUFBVSxVQUFVLE9BQU8sS0FBSyxZQUFZLFdBQVcsVUFBVSxZQUFZLFdBQVcsWUFBWSxPQUFPLE9BQU8sT0FBTyxLQUFLLFVBQVUsWUFBWSxpQ0FBaUMsMkJBQTJCLEtBQUssc0JBQXNCLDJCQUEyQixnREFBZ0Qsc0JBQXNCLHVCQUF1QixvQkFBb0IsbUJBQW1CLGdCQUFnQixrQkFBa0Isb0NBQW9DLDBFQUEwRSxPQUFPLDRCQUE0QixvQkFBb0IscUJBQXFCLEtBQUssdUJBQXVCLDJCQUEyQixpQkFBaUIsa0JBQWtCLHlDQUF5QyxtQkFBbUIsMkJBQTJCLDZFQUE2RSxLQUFLLG1DQUFtQyxtQkFBbUIsNEJBQTRCLEtBQUssdUJBQXVCO0FBQzFzQztBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjAyNS10b2RvLy4vc3JjL2Nzcy90YXNrLWhvdmVyLmNzcz84YjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAudGFzayB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbn1cclxuXHJcbi50YXNrOmJlZm9yZSB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwLCAxMCwgMTAsIDAuMik7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMCU7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjNzO1xyXG4gICAgLyogdHJhbnNpdGlvbjogYWxsIDMwMG1zIGN1YmljLWJlemllcigwLjQ1NSwgMC4wMywgMC41MTUsIDAuOTU1KTsgKi9cclxufVxyXG5cclxuLnRhc2s6aG92ZXI6YmVmb3JlIHtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG4uaG92ZXItYnV0dG9uIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogNTAlO1xyXG4gICAgbGVmdDogNTAlO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbiAgICBvcGFjaXR5OiAwO1xyXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgdHJhbnNpdGlvbjpcclxuICAgICAgICBvcGFjaXR5IDAuM3MgZWFzZSxcclxuICAgICAgICB2aXNpYmlsaXR5IDAuM3M7XHJcbn1cclxuXHJcbi50YXNrOmhvdmVyIC5ob3Zlci1idXR0b24ge1xyXG4gICAgb3BhY2l0eTogMTtcclxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XHJcbn1cclxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL3Rhc2staG92ZXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLHVDQUF1QztJQUN2QyxXQUFXO0lBQ1gsY0FBYztJQUNkLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCwyQkFBMkI7SUFDM0IsbUVBQW1FO0FBQ3ZFOztBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLFNBQVM7SUFDVCxnQ0FBZ0M7SUFDaEMsVUFBVTtJQUNWLGtCQUFrQjtJQUNsQjs7dUJBRW1CO0FBQ3ZCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLG1CQUFtQjtBQUN2QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIudGFzayB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuXFxyXFxuLnRhc2s6YmVmb3JlIHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwLCAxMCwgMTAsIDAuMik7XFxyXFxuICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMCU7XFxyXFxuICAgIGxlZnQ6IDA7XFxyXFxuICAgIGJvdHRvbTogMDtcXHJcXG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjNzO1xcclxcbiAgICAvKiB0cmFuc2l0aW9uOiBhbGwgMzAwbXMgY3ViaWMtYmV6aWVyKDAuNDU1LCAwLjAzLCAwLjUxNSwgMC45NTUpOyAqL1xcclxcbn1cXHJcXG5cXHJcXG4udGFzazpob3ZlcjpiZWZvcmUge1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4uaG92ZXItYnV0dG9uIHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB0b3A6IDUwJTtcXHJcXG4gICAgbGVmdDogNTAlO1xcclxcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXHJcXG4gICAgb3BhY2l0eTogMDtcXHJcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcclxcbiAgICB0cmFuc2l0aW9uOlxcclxcbiAgICAgICAgb3BhY2l0eSAwLjNzIGVhc2UsXFxyXFxuICAgICAgICB2aXNpYmlsaXR5IDAuM3M7XFxyXFxufVxcclxcblxcclxcbi50YXNrOmhvdmVyIC5ob3Zlci1idXR0b24ge1xcclxcbiAgICBvcGFjaXR5OiAxO1xcclxcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///989\n')}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var C=__webpack_module_cache__[I]={id:I,exports:{}};return __webpack_modules__[I](C,C.exports,__webpack_require__),C.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=I=>{var g=I&&I.__esModule?()=>I.default:()=>I;return __webpack_require__.d(g,{a:g}),g},__webpack_require__.d=(I,g)=>{for(var C in g)__webpack_require__.o(g,C)&&!__webpack_require__.o(I,C)&&Object.defineProperty(I,C,{enumerable:!0,get:g[C]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}(),__webpack_require__.o=(I,g)=>Object.prototype.hasOwnProperty.call(I,g),(()=>{var I;__webpack_require__.g.importScripts&&(I=__webpack_require__.g.location+"");var g=__webpack_require__.g.document;if(!I&&g&&(g.currentScript&&"SCRIPT"===g.currentScript.tagName.toUpperCase()&&(I=g.currentScript.src),!I)){var C=g.getElementsByTagName("script");if(C.length)for(var n=C.length-1;n>-1&&(!I||!/^http(s?):/.test(I));)I=C[n--].src}if(!I)throw new Error("Automatic publicPath is not supported in this browser");I=I.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=I})(),__webpack_require__.b=document.baseURI||self.location.href,__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(654)})();